"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const cdk = require("@aws-cdk/core");
const integ_tests_1 = require("@aws-cdk/integ-tests");
const ssm = require("../lib");
const paramName = 'integ-list-param';
const paramValue = ['value1', 'value2'];
class TestCaseBase extends cdk.Stack {
    constructor(scope, id) {
        super(scope, id);
        this.listParam = new ssm.StringListParameter(this, 'ListParam', {
            parameterName: paramName,
            stringListValue: paramValue,
        });
    }
}
const app = new cdk.App({
    treeMetadata: false,
});
app.node.setContext('@aws-cdk/core:newStyleStackSynthesis', true);
const base = new TestCaseBase(app, 'base');
const testCase = new cdk.Stack(app, 'list-param');
// creates the dependency between stacks
new cdk.CfnOutput(testCase, 'Output', {
    value: cdk.Fn.join(',', base.listParam.stringListValue),
});
/**
 * get the value from the `base` stack and then write it to a new parameter
 * We will then assert that the value that is written is the correct value
 * This validates that the `fromXXX` and `valueForXXX` imports the value correctly
 */
const fromAttrs = ssm.StringListParameter.fromListParameterAttributes(testCase, 'FromAttrs', {
    parameterName: paramName,
    elementType: ssm.ParameterValueType.STRING,
});
const ssmAttrsValue = new ssm.CfnParameter(testCase, 'attrs-test', {
    type: 'StringList',
    value: cdk.Fn.join(',', fromAttrs.stringListValue),
});
const value = ssm.StringListParameter.valueForTypedListParameter(testCase, paramName, ssm.ParameterValueType.STRING);
const ssmValue = new ssm.CfnParameter(testCase, 'value-test', {
    type: 'StringList',
    value: cdk.Fn.join(',', value),
});
const versionValue = ssm.StringListParameter.valueForTypedListParameter(testCase, paramName, ssm.ParameterValueType.STRING, 1);
const ssmVersionValue = new ssm.CfnParameter(testCase, 'version-value-test', {
    type: 'StringList',
    value: cdk.Fn.join(',', versionValue),
});
const integ = new integ_tests_1.IntegTest(app, 'ssm-string-param', {
    testCases: [
        testCase,
    ],
});
// list the parameters
const actualAttrs = integ.assertions.awsApiCall('SSM', 'getParameters', {
    Names: [ssmVersionValue.ref, ssmValue.ref, ssmAttrsValue.ref],
});
actualAttrs.expect(integ_tests_1.ExpectedResult.objectLike({
    Parameters: integ_tests_1.Match.arrayWith([
        integ_tests_1.Match.objectLike({
            Value: paramValue.join(','),
        }),
        integ_tests_1.Match.objectLike({
            Value: paramValue.join(','),
        }),
        integ_tests_1.Match.objectLike({
            Value: paramValue.join(','),
        }),
    ]),
}));
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW50ZWcubGlzdC1wYXJhbWV0ZXIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJpbnRlZy5saXN0LXBhcmFtZXRlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLHFDQUFxQztBQUNyQyxzREFBd0U7QUFFeEUsOEJBQThCO0FBQzlCLE1BQU0sU0FBUyxHQUFHLGtCQUFrQixDQUFDO0FBQ3JDLE1BQU0sVUFBVSxHQUFHLENBQUMsUUFBUSxFQUFFLFFBQVEsQ0FBQyxDQUFDO0FBRXhDLE1BQU0sWUFBYSxTQUFRLEdBQUcsQ0FBQyxLQUFLO0lBRWxDLFlBQVksS0FBZ0IsRUFBRSxFQUFVO1FBQ3RDLEtBQUssQ0FBQyxLQUFLLEVBQUUsRUFBRSxDQUFDLENBQUM7UUFFakIsSUFBSSxDQUFDLFNBQVMsR0FBRyxJQUFJLEdBQUcsQ0FBQyxtQkFBbUIsQ0FBQyxJQUFJLEVBQUUsV0FBVyxFQUFFO1lBQzlELGFBQWEsRUFBRSxTQUFTO1lBQ3hCLGVBQWUsRUFBRSxVQUFVO1NBQzVCLENBQUMsQ0FBQztLQUNKO0NBQ0Y7QUFHRCxNQUFNLEdBQUcsR0FBRyxJQUFJLEdBQUcsQ0FBQyxHQUFHLENBQUM7SUFDdEIsWUFBWSxFQUFFLEtBQUs7Q0FDcEIsQ0FBQyxDQUFDO0FBQ0gsR0FBRyxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsc0NBQXNDLEVBQUUsSUFBSSxDQUFDLENBQUM7QUFDbEUsTUFBTSxJQUFJLEdBQUcsSUFBSSxZQUFZLENBQUMsR0FBRyxFQUFFLE1BQU0sQ0FBQyxDQUFDO0FBQzNDLE1BQU0sUUFBUSxHQUFHLElBQUksR0FBRyxDQUFDLEtBQUssQ0FBQyxHQUFHLEVBQUUsWUFBWSxDQUFDLENBQUM7QUFFbEQsd0NBQXdDO0FBQ3hDLElBQUksR0FBRyxDQUFDLFNBQVMsQ0FBQyxRQUFRLEVBQUUsUUFBUSxFQUFFO0lBQ3BDLEtBQUssRUFBRSxHQUFHLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxHQUFHLEVBQUUsSUFBSSxDQUFDLFNBQVMsQ0FBQyxlQUFlLENBQUM7Q0FDeEQsQ0FBQyxDQUFDO0FBR0g7Ozs7R0FJRztBQUVILE1BQU0sU0FBUyxHQUFHLEdBQUcsQ0FBQyxtQkFBbUIsQ0FBQywyQkFBMkIsQ0FBQyxRQUFRLEVBQUUsV0FBVyxFQUFFO0lBQzNGLGFBQWEsRUFBRSxTQUFTO0lBQ3hCLFdBQVcsRUFBRSxHQUFHLENBQUMsa0JBQWtCLENBQUMsTUFBTTtDQUMzQyxDQUFDLENBQUM7QUFDSCxNQUFNLGFBQWEsR0FBRyxJQUFJLEdBQUcsQ0FBQyxZQUFZLENBQUMsUUFBUSxFQUFFLFlBQVksRUFBRTtJQUNqRSxJQUFJLEVBQUUsWUFBWTtJQUNsQixLQUFLLEVBQUUsR0FBRyxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsR0FBRyxFQUFFLFNBQVMsQ0FBQyxlQUFlLENBQUM7Q0FDbkQsQ0FBQyxDQUFDO0FBRUgsTUFBTSxLQUFLLEdBQUcsR0FBRyxDQUFDLG1CQUFtQixDQUFDLDBCQUEwQixDQUFDLFFBQVEsRUFBRSxTQUFTLEVBQUUsR0FBRyxDQUFDLGtCQUFrQixDQUFDLE1BQU0sQ0FBQyxDQUFDO0FBQ3JILE1BQU0sUUFBUSxHQUFHLElBQUksR0FBRyxDQUFDLFlBQVksQ0FBQyxRQUFRLEVBQUUsWUFBWSxFQUFFO0lBQzVELElBQUksRUFBRSxZQUFZO0lBQ2xCLEtBQUssRUFBRSxHQUFHLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxHQUFHLEVBQUUsS0FBSyxDQUFDO0NBQy9CLENBQUMsQ0FBQztBQUVILE1BQU0sWUFBWSxHQUFHLEdBQUcsQ0FBQyxtQkFBbUIsQ0FBQywwQkFBMEIsQ0FBQyxRQUFRLEVBQUUsU0FBUyxFQUFFLEdBQUcsQ0FBQyxrQkFBa0IsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxDQUFDLENBQUM7QUFDL0gsTUFBTSxlQUFlLEdBQUcsSUFBSSxHQUFHLENBQUMsWUFBWSxDQUFDLFFBQVEsRUFBRSxvQkFBb0IsRUFBRTtJQUMzRSxJQUFJLEVBQUUsWUFBWTtJQUNsQixLQUFLLEVBQUUsR0FBRyxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsR0FBRyxFQUFFLFlBQVksQ0FBQztDQUN0QyxDQUFDLENBQUM7QUFHSCxNQUFNLEtBQUssR0FBRyxJQUFJLHVCQUFTLENBQUMsR0FBRyxFQUFFLGtCQUFrQixFQUFFO0lBQ25ELFNBQVMsRUFBRTtRQUNULFFBQVE7S0FDVDtDQUNGLENBQUMsQ0FBQztBQUVILHNCQUFzQjtBQUN0QixNQUFNLFdBQVcsR0FBRyxLQUFLLENBQUMsVUFBVSxDQUFDLFVBQVUsQ0FBQyxLQUFLLEVBQUUsZUFBZSxFQUFFO0lBQ3RFLEtBQUssRUFBRSxDQUFDLGVBQWUsQ0FBQyxHQUFHLEVBQUUsUUFBUSxDQUFDLEdBQUcsRUFBRSxhQUFhLENBQUMsR0FBRyxDQUFDO0NBQzlELENBQUMsQ0FBQztBQUVILFdBQVcsQ0FBQyxNQUFNLENBQUMsNEJBQWMsQ0FBQyxVQUFVLENBQUM7SUFDM0MsVUFBVSxFQUFFLG1CQUFLLENBQUMsU0FBUyxDQUFDO1FBQzFCLG1CQUFLLENBQUMsVUFBVSxDQUFDO1lBQ2YsS0FBSyxFQUFFLFVBQVUsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDO1NBQzVCLENBQUM7UUFDRixtQkFBSyxDQUFDLFVBQVUsQ0FBQztZQUNmLEtBQUssRUFBRSxVQUFVLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQztTQUM1QixDQUFDO1FBQ0YsbUJBQUssQ0FBQyxVQUFVLENBQUM7WUFDZixLQUFLLEVBQUUsVUFBVSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUM7U0FDNUIsQ0FBQztLQUNILENBQUM7Q0FDSCxDQUFDLENBQUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAqIGFzIGNkayBmcm9tICdAYXdzLWNkay9jb3JlJztcbmltcG9ydCB7IEludGVnVGVzdCwgRXhwZWN0ZWRSZXN1bHQsIE1hdGNoIH0gZnJvbSAnQGF3cy1jZGsvaW50ZWctdGVzdHMnO1xuaW1wb3J0IHsgQ29uc3RydWN0IH0gZnJvbSAnY29uc3RydWN0cyc7XG5pbXBvcnQgKiBhcyBzc20gZnJvbSAnLi4vbGliJztcbmNvbnN0IHBhcmFtTmFtZSA9ICdpbnRlZy1saXN0LXBhcmFtJztcbmNvbnN0IHBhcmFtVmFsdWUgPSBbJ3ZhbHVlMScsICd2YWx1ZTInXTtcblxuY2xhc3MgVGVzdENhc2VCYXNlIGV4dGVuZHMgY2RrLlN0YWNrIHtcbiAgcHVibGljIHJlYWRvbmx5IGxpc3RQYXJhbTogc3NtLklTdHJpbmdMaXN0UGFyYW1ldGVyO1xuICBjb25zdHJ1Y3RvcihzY29wZTogQ29uc3RydWN0LCBpZDogc3RyaW5nKSB7XG4gICAgc3VwZXIoc2NvcGUsIGlkKTtcblxuICAgIHRoaXMubGlzdFBhcmFtID0gbmV3IHNzbS5TdHJpbmdMaXN0UGFyYW1ldGVyKHRoaXMsICdMaXN0UGFyYW0nLCB7XG4gICAgICBwYXJhbWV0ZXJOYW1lOiBwYXJhbU5hbWUsXG4gICAgICBzdHJpbmdMaXN0VmFsdWU6IHBhcmFtVmFsdWUsXG4gICAgfSk7XG4gIH1cbn1cblxuXG5jb25zdCBhcHAgPSBuZXcgY2RrLkFwcCh7XG4gIHRyZWVNZXRhZGF0YTogZmFsc2UsXG59KTtcbmFwcC5ub2RlLnNldENvbnRleHQoJ0Bhd3MtY2RrL2NvcmU6bmV3U3R5bGVTdGFja1N5bnRoZXNpcycsIHRydWUpO1xuY29uc3QgYmFzZSA9IG5ldyBUZXN0Q2FzZUJhc2UoYXBwLCAnYmFzZScpO1xuY29uc3QgdGVzdENhc2UgPSBuZXcgY2RrLlN0YWNrKGFwcCwgJ2xpc3QtcGFyYW0nKTtcblxuLy8gY3JlYXRlcyB0aGUgZGVwZW5kZW5jeSBiZXR3ZWVuIHN0YWNrc1xubmV3IGNkay5DZm5PdXRwdXQodGVzdENhc2UsICdPdXRwdXQnLCB7XG4gIHZhbHVlOiBjZGsuRm4uam9pbignLCcsIGJhc2UubGlzdFBhcmFtLnN0cmluZ0xpc3RWYWx1ZSksXG59KTtcblxuXG4vKipcbiAqIGdldCB0aGUgdmFsdWUgZnJvbSB0aGUgYGJhc2VgIHN0YWNrIGFuZCB0aGVuIHdyaXRlIGl0IHRvIGEgbmV3IHBhcmFtZXRlclxuICogV2Ugd2lsbCB0aGVuIGFzc2VydCB0aGF0IHRoZSB2YWx1ZSB0aGF0IGlzIHdyaXR0ZW4gaXMgdGhlIGNvcnJlY3QgdmFsdWVcbiAqIFRoaXMgdmFsaWRhdGVzIHRoYXQgdGhlIGBmcm9tWFhYYCBhbmQgYHZhbHVlRm9yWFhYYCBpbXBvcnRzIHRoZSB2YWx1ZSBjb3JyZWN0bHlcbiAqL1xuXG5jb25zdCBmcm9tQXR0cnMgPSBzc20uU3RyaW5nTGlzdFBhcmFtZXRlci5mcm9tTGlzdFBhcmFtZXRlckF0dHJpYnV0ZXModGVzdENhc2UsICdGcm9tQXR0cnMnLCB7XG4gIHBhcmFtZXRlck5hbWU6IHBhcmFtTmFtZSxcbiAgZWxlbWVudFR5cGU6IHNzbS5QYXJhbWV0ZXJWYWx1ZVR5cGUuU1RSSU5HLFxufSk7XG5jb25zdCBzc21BdHRyc1ZhbHVlID0gbmV3IHNzbS5DZm5QYXJhbWV0ZXIodGVzdENhc2UsICdhdHRycy10ZXN0Jywge1xuICB0eXBlOiAnU3RyaW5nTGlzdCcsXG4gIHZhbHVlOiBjZGsuRm4uam9pbignLCcsIGZyb21BdHRycy5zdHJpbmdMaXN0VmFsdWUpLFxufSk7XG5cbmNvbnN0IHZhbHVlID0gc3NtLlN0cmluZ0xpc3RQYXJhbWV0ZXIudmFsdWVGb3JUeXBlZExpc3RQYXJhbWV0ZXIodGVzdENhc2UsIHBhcmFtTmFtZSwgc3NtLlBhcmFtZXRlclZhbHVlVHlwZS5TVFJJTkcpO1xuY29uc3Qgc3NtVmFsdWUgPSBuZXcgc3NtLkNmblBhcmFtZXRlcih0ZXN0Q2FzZSwgJ3ZhbHVlLXRlc3QnLCB7XG4gIHR5cGU6ICdTdHJpbmdMaXN0JyxcbiAgdmFsdWU6IGNkay5Gbi5qb2luKCcsJywgdmFsdWUpLFxufSk7XG5cbmNvbnN0IHZlcnNpb25WYWx1ZSA9IHNzbS5TdHJpbmdMaXN0UGFyYW1ldGVyLnZhbHVlRm9yVHlwZWRMaXN0UGFyYW1ldGVyKHRlc3RDYXNlLCBwYXJhbU5hbWUsIHNzbS5QYXJhbWV0ZXJWYWx1ZVR5cGUuU1RSSU5HLCAxKTtcbmNvbnN0IHNzbVZlcnNpb25WYWx1ZSA9IG5ldyBzc20uQ2ZuUGFyYW1ldGVyKHRlc3RDYXNlLCAndmVyc2lvbi12YWx1ZS10ZXN0Jywge1xuICB0eXBlOiAnU3RyaW5nTGlzdCcsXG4gIHZhbHVlOiBjZGsuRm4uam9pbignLCcsIHZlcnNpb25WYWx1ZSksXG59KTtcblxuXG5jb25zdCBpbnRlZyA9IG5ldyBJbnRlZ1Rlc3QoYXBwLCAnc3NtLXN0cmluZy1wYXJhbScsIHtcbiAgdGVzdENhc2VzOiBbXG4gICAgdGVzdENhc2UsXG4gIF0sXG59KTtcblxuLy8gbGlzdCB0aGUgcGFyYW1ldGVyc1xuY29uc3QgYWN0dWFsQXR0cnMgPSBpbnRlZy5hc3NlcnRpb25zLmF3c0FwaUNhbGwoJ1NTTScsICdnZXRQYXJhbWV0ZXJzJywge1xuICBOYW1lczogW3NzbVZlcnNpb25WYWx1ZS5yZWYsIHNzbVZhbHVlLnJlZiwgc3NtQXR0cnNWYWx1ZS5yZWZdLFxufSk7XG5cbmFjdHVhbEF0dHJzLmV4cGVjdChFeHBlY3RlZFJlc3VsdC5vYmplY3RMaWtlKHtcbiAgUGFyYW1ldGVyczogTWF0Y2guYXJyYXlXaXRoKFtcbiAgICBNYXRjaC5vYmplY3RMaWtlKHtcbiAgICAgIFZhbHVlOiBwYXJhbVZhbHVlLmpvaW4oJywnKSxcbiAgICB9KSxcbiAgICBNYXRjaC5vYmplY3RMaWtlKHtcbiAgICAgIFZhbHVlOiBwYXJhbVZhbHVlLmpvaW4oJywnKSxcbiAgICB9KSxcbiAgICBNYXRjaC5vYmplY3RMaWtlKHtcbiAgICAgIFZhbHVlOiBwYXJhbVZhbHVlLmpvaW4oJywnKSxcbiAgICB9KSxcbiAgXSksXG59KSk7XG4iXX0=