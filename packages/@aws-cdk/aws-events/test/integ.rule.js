"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const core_1 = require("@aws-cdk/core");
const integ_tests_1 = require("@aws-cdk/integ-tests");
const lib_1 = require("../lib");
const app = new core_1.App();
const stack = new core_1.Stack(app, 'RuleStack');
new lib_1.Rule(stack, 'MyRule', {
    eventPattern: {
        account: ['account1', 'account2'],
        detail: {
            foo: [1, 2],
            strings: ['foo', 'bar'],
            rangeMatcher: lib_1.Match.interval(-1, 1),
            stringMatcher: lib_1.Match.exactString('I am just a string'),
            prefixMatcher: lib_1.Match.prefix('aws.'),
            ipAddress: lib_1.Match.ipAddressRange('192.0.2.0/24'),
            shouldExist: lib_1.Match.exists(),
            shouldNotExist: lib_1.Match.doesNotExist(),
            numbers: lib_1.Match.allOf(lib_1.Match.greaterThan(0), lib_1.Match.lessThan(5)),
            topLevel: {
                deeper: lib_1.Match.equal(42),
                oneMoreLevel: {
                    deepest: lib_1.Match.anyOf(lib_1.Match.lessThanOrEqual(-1), lib_1.Match.greaterThanOrEqual(1)),
                },
            },
            state: lib_1.Match.anythingBut('initializing'),
            limit: lib_1.Match.anythingBut(100, 200, 300),
            notPrefixedBy: lib_1.Match.anythingButPrefix('sensitive-'),
            suffix: lib_1.Match.suffix('.com'),
            equalsIgnoreCase: lib_1.Match.equalsIgnoreCase('ignore case'),
        },
        detailType: ['detailType1'],
        id: ['id1', 'id2'],
        region: ['region1', 'region2', 'region3'],
        resources: ['r1'],
        source: ['src1', 'src2'],
        time: ['t1'],
        version: ['0'],
    },
});
new integ_tests_1.IntegTest(app, 'IntegTest-BatchDefaultEnvVarsStack', {
    testCases: [stack],
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW50ZWcucnVsZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbImludGVnLnJ1bGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSx3Q0FBMkM7QUFDM0Msc0RBQWlEO0FBQ2pELGdDQUFxQztBQUVyQyxNQUFNLEdBQUcsR0FBRyxJQUFJLFVBQUcsRUFBRSxDQUFDO0FBRXRCLE1BQU0sS0FBSyxHQUFHLElBQUksWUFBSyxDQUFDLEdBQUcsRUFBRSxXQUFXLENBQUMsQ0FBQztBQUcxQyxJQUFJLFVBQUksQ0FBQyxLQUFLLEVBQUUsUUFBUSxFQUFFO0lBQ3hCLFlBQVksRUFBRTtRQUNaLE9BQU8sRUFBRSxDQUFDLFVBQVUsRUFBRSxVQUFVLENBQUM7UUFDakMsTUFBTSxFQUFFO1lBQ04sR0FBRyxFQUFFLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQztZQUNYLE9BQU8sRUFBRSxDQUFDLEtBQUssRUFBRSxLQUFLLENBQUM7WUFDdkIsWUFBWSxFQUFFLFdBQUssQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDO1lBQ25DLGFBQWEsRUFBRSxXQUFLLENBQUMsV0FBVyxDQUFDLG9CQUFvQixDQUFDO1lBQ3RELGFBQWEsRUFBRSxXQUFLLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQztZQUNuQyxTQUFTLEVBQUUsV0FBSyxDQUFDLGNBQWMsQ0FBQyxjQUFjLENBQUM7WUFDL0MsV0FBVyxFQUFFLFdBQUssQ0FBQyxNQUFNLEVBQUU7WUFDM0IsY0FBYyxFQUFFLFdBQUssQ0FBQyxZQUFZLEVBQUU7WUFDcEMsT0FBTyxFQUFFLFdBQUssQ0FBQyxLQUFLLENBQUMsV0FBSyxDQUFDLFdBQVcsQ0FBQyxDQUFDLENBQUMsRUFBRSxXQUFLLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQzdELFFBQVEsRUFBRTtnQkFDUixNQUFNLEVBQUUsV0FBSyxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUM7Z0JBQ3ZCLFlBQVksRUFBRTtvQkFDWixPQUFPLEVBQUUsV0FBSyxDQUFDLEtBQUssQ0FBQyxXQUFLLENBQUMsZUFBZSxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsV0FBSyxDQUFDLGtCQUFrQixDQUFDLENBQUMsQ0FBQyxDQUFDO2lCQUM3RTthQUNGO1lBQ0QsS0FBSyxFQUFFLFdBQUssQ0FBQyxXQUFXLENBQUMsY0FBYyxDQUFDO1lBQ3hDLEtBQUssRUFBRSxXQUFLLENBQUMsV0FBVyxDQUFDLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxDQUFDO1lBQ3ZDLGFBQWEsRUFBRSxXQUFLLENBQUMsaUJBQWlCLENBQUMsWUFBWSxDQUFDO1lBQ3BELE1BQU0sRUFBRSxXQUFLLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQztZQUM1QixnQkFBZ0IsRUFBRSxXQUFLLENBQUMsZ0JBQWdCLENBQUMsYUFBYSxDQUFDO1NBQ3hEO1FBQ0QsVUFBVSxFQUFFLENBQUMsYUFBYSxDQUFDO1FBQzNCLEVBQUUsRUFBRSxDQUFDLEtBQUssRUFBRSxLQUFLLENBQUM7UUFDbEIsTUFBTSxFQUFFLENBQUMsU0FBUyxFQUFFLFNBQVMsRUFBRSxTQUFTLENBQUM7UUFDekMsU0FBUyxFQUFFLENBQUMsSUFBSSxDQUFDO1FBQ2pCLE1BQU0sRUFBRSxDQUFDLE1BQU0sRUFBRSxNQUFNLENBQUM7UUFDeEIsSUFBSSxFQUFFLENBQUMsSUFBSSxDQUFDO1FBQ1osT0FBTyxFQUFFLENBQUMsR0FBRyxDQUFDO0tBQ2Y7Q0FDRixDQUFDLENBQUM7QUFFSCxJQUFJLHVCQUFTLENBQUMsR0FBRyxFQUFFLG9DQUFvQyxFQUFFO0lBQ3ZELFNBQVMsRUFBRSxDQUFDLEtBQUssQ0FBQztDQUNuQixDQUFDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBBcHAsIFN0YWNrIH0gZnJvbSAnQGF3cy1jZGsvY29yZSc7XG5pbXBvcnQgeyBJbnRlZ1Rlc3QgfSBmcm9tICdAYXdzLWNkay9pbnRlZy10ZXN0cyc7XG5pbXBvcnQgeyBSdWxlLCBNYXRjaCB9IGZyb20gJy4uL2xpYic7XG5cbmNvbnN0IGFwcCA9IG5ldyBBcHAoKTtcblxuY29uc3Qgc3RhY2sgPSBuZXcgU3RhY2soYXBwLCAnUnVsZVN0YWNrJyk7XG5cblxubmV3IFJ1bGUoc3RhY2ssICdNeVJ1bGUnLCB7XG4gIGV2ZW50UGF0dGVybjoge1xuICAgIGFjY291bnQ6IFsnYWNjb3VudDEnLCAnYWNjb3VudDInXSxcbiAgICBkZXRhaWw6IHtcbiAgICAgIGZvbzogWzEsIDJdLFxuICAgICAgc3RyaW5nczogWydmb28nLCAnYmFyJ10sXG4gICAgICByYW5nZU1hdGNoZXI6IE1hdGNoLmludGVydmFsKC0xLCAxKSxcbiAgICAgIHN0cmluZ01hdGNoZXI6IE1hdGNoLmV4YWN0U3RyaW5nKCdJIGFtIGp1c3QgYSBzdHJpbmcnKSxcbiAgICAgIHByZWZpeE1hdGNoZXI6IE1hdGNoLnByZWZpeCgnYXdzLicpLFxuICAgICAgaXBBZGRyZXNzOiBNYXRjaC5pcEFkZHJlc3NSYW5nZSgnMTkyLjAuMi4wLzI0JyksXG4gICAgICBzaG91bGRFeGlzdDogTWF0Y2guZXhpc3RzKCksXG4gICAgICBzaG91bGROb3RFeGlzdDogTWF0Y2guZG9lc05vdEV4aXN0KCksXG4gICAgICBudW1iZXJzOiBNYXRjaC5hbGxPZihNYXRjaC5ncmVhdGVyVGhhbigwKSwgTWF0Y2gubGVzc1RoYW4oNSkpLFxuICAgICAgdG9wTGV2ZWw6IHtcbiAgICAgICAgZGVlcGVyOiBNYXRjaC5lcXVhbCg0MiksXG4gICAgICAgIG9uZU1vcmVMZXZlbDoge1xuICAgICAgICAgIGRlZXBlc3Q6IE1hdGNoLmFueU9mKE1hdGNoLmxlc3NUaGFuT3JFcXVhbCgtMSksIE1hdGNoLmdyZWF0ZXJUaGFuT3JFcXVhbCgxKSksXG4gICAgICAgIH0sXG4gICAgICB9LFxuICAgICAgc3RhdGU6IE1hdGNoLmFueXRoaW5nQnV0KCdpbml0aWFsaXppbmcnKSxcbiAgICAgIGxpbWl0OiBNYXRjaC5hbnl0aGluZ0J1dCgxMDAsIDIwMCwgMzAwKSxcbiAgICAgIG5vdFByZWZpeGVkQnk6IE1hdGNoLmFueXRoaW5nQnV0UHJlZml4KCdzZW5zaXRpdmUtJyksXG4gICAgICBzdWZmaXg6IE1hdGNoLnN1ZmZpeCgnLmNvbScpLFxuICAgICAgZXF1YWxzSWdub3JlQ2FzZTogTWF0Y2guZXF1YWxzSWdub3JlQ2FzZSgnaWdub3JlIGNhc2UnKSxcbiAgICB9LFxuICAgIGRldGFpbFR5cGU6IFsnZGV0YWlsVHlwZTEnXSxcbiAgICBpZDogWydpZDEnLCAnaWQyJ10sXG4gICAgcmVnaW9uOiBbJ3JlZ2lvbjEnLCAncmVnaW9uMicsICdyZWdpb24zJ10sXG4gICAgcmVzb3VyY2VzOiBbJ3IxJ10sXG4gICAgc291cmNlOiBbJ3NyYzEnLCAnc3JjMiddLFxuICAgIHRpbWU6IFsndDEnXSxcbiAgICB2ZXJzaW9uOiBbJzAnXSxcbiAgfSxcbn0pO1xuXG5uZXcgSW50ZWdUZXN0KGFwcCwgJ0ludGVnVGVzdC1CYXRjaERlZmF1bHRFbnZWYXJzU3RhY2snLCB7XG4gIHRlc3RDYXNlczogW3N0YWNrXSxcbn0pO1xuIl19