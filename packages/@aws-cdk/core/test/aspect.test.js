"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const cxschema = require("@aws-cdk/cloud-assembly-schema");
const constructs_1 = require("constructs");
const lib_1 = require("../lib");
const aspect_1 = require("../lib/aspect");
class MyConstruct extends constructs_1.Construct {
    constructor() {
        super(...arguments);
        this.visitCounter = 0;
    }
    static IsMyConstruct(x) {
        return x.visitCounter !== undefined;
    }
}
class VisitOnce {
    visit(node) {
        if (MyConstruct.IsMyConstruct(node)) {
            node.visitCounter += 1;
        }
    }
}
class MyAspect {
    visit(node) {
        node.node.addMetadata('foo', 'bar');
    }
}
describe('aspect', () => {
    test('Aspects are invoked only once', () => {
        const app = new lib_1.App();
        const root = new MyConstruct(app, 'MyConstruct');
        aspect_1.Aspects.of(root).add(new VisitOnce());
        app.synth();
        expect(root.visitCounter).toEqual(1);
        app.synth();
        expect(root.visitCounter).toEqual(1);
    });
    test('Warn if an Aspect is added via another Aspect', () => {
        const app = new lib_1.App();
        const root = new MyConstruct(app, 'MyConstruct');
        const child = new MyConstruct(root, 'ChildConstruct');
        aspect_1.Aspects.of(root).add({
            visit(construct) {
                aspect_1.Aspects.of(construct).add({
                    visit(inner) {
                        inner.node.addMetadata('test', 'would-be-ignored');
                    },
                });
            },
        });
        app.synth();
        expect(root.node.metadata[0].type).toEqual(cxschema.ArtifactMetadataEntryType.WARN);
        expect(root.node.metadata[0].data).toEqual('We detected an Aspect was added via another Aspect, and will not be applied');
        // warning is not added to child construct
        expect(child.node.metadata.length).toEqual(0);
    });
    test('Do not warn if an Aspect is added directly (not by another aspect)', () => {
        const app = new lib_1.App();
        const root = new MyConstruct(app, 'Construct');
        const child = new MyConstruct(root, 'ChildConstruct');
        aspect_1.Aspects.of(root).add(new MyAspect());
        app.synth();
        expect(root.node.metadata[0].type).toEqual('foo');
        expect(root.node.metadata[0].data).toEqual('bar');
        expect(child.node.metadata[0].type).toEqual('foo');
        expect(child.node.metadata[0].data).toEqual('bar');
        // no warning is added
        expect(root.node.metadata.length).toEqual(1);
        expect(child.node.metadata.length).toEqual(1);
    });
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXNwZWN0LnRlc3QuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJhc3BlY3QudGVzdC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLDJEQUEyRDtBQUMzRCwyQ0FBbUQ7QUFDbkQsZ0NBQTZCO0FBQzdCLDBDQUFpRDtBQUVqRCxNQUFNLFdBQVksU0FBUSxzQkFBUztJQUFuQzs7UUFJUyxpQkFBWSxHQUFXLENBQUMsQ0FBQztJQUNsQyxDQUFDO0lBSlEsTUFBTSxDQUFDLGFBQWEsQ0FBQyxDQUFNO1FBQ2hDLE9BQU8sQ0FBQyxDQUFDLFlBQVksS0FBSyxTQUFTLENBQUM7SUFDdEMsQ0FBQztDQUVGO0FBRUQsTUFBTSxTQUFTO0lBQ04sS0FBSyxDQUFDLElBQWdCO1FBQzNCLElBQUksV0FBVyxDQUFDLGFBQWEsQ0FBQyxJQUFJLENBQUMsRUFBRTtZQUNuQyxJQUFJLENBQUMsWUFBWSxJQUFJLENBQUMsQ0FBQztTQUN4QjtJQUNILENBQUM7Q0FDRjtBQUVELE1BQU0sUUFBUTtJQUNMLEtBQUssQ0FBQyxJQUFnQjtRQUMzQixJQUFJLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxLQUFLLEVBQUUsS0FBSyxDQUFDLENBQUM7SUFDdEMsQ0FBQztDQUNGO0FBRUQsUUFBUSxDQUFDLFFBQVEsRUFBRSxHQUFHLEVBQUU7SUFDdEIsSUFBSSxDQUFDLCtCQUErQixFQUFFLEdBQUcsRUFBRTtRQUN6QyxNQUFNLEdBQUcsR0FBRyxJQUFJLFNBQUcsRUFBRSxDQUFDO1FBQ3RCLE1BQU0sSUFBSSxHQUFHLElBQUksV0FBVyxDQUFDLEdBQUcsRUFBRSxhQUFhLENBQUMsQ0FBQztRQUNqRCxnQkFBTyxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxHQUFHLENBQUMsSUFBSSxTQUFTLEVBQUUsQ0FBQyxDQUFDO1FBQ3RDLEdBQUcsQ0FBQyxLQUFLLEVBQUUsQ0FBQztRQUNaLE1BQU0sQ0FBQyxJQUFJLENBQUMsWUFBWSxDQUFDLENBQUMsT0FBTyxDQUFD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Q0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxNQUFNLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDaEQsQ0FBQyxDQUFDLENBQUM7QUFDTCxDQUFDLENBQUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAqIGFzIGN4c2NoZW1hIGZyb20gJ0Bhd3MtY2RrL2Nsb3VkLWFzc2VtYmx5LXNjaGVtYSc7XG5pbXBvcnQgeyBDb25zdHJ1Y3QsIElDb25zdHJ1Y3QgfSBmcm9tICdjb25zdHJ1Y3RzJztcbmltcG9ydCB7IEFwcCB9IGZyb20gJy4uL2xpYic7XG5pbXBvcnQgeyBJQXNwZWN0LCBBc3BlY3RzIH0gZnJvbSAnLi4vbGliL2FzcGVjdCc7XG5cbmNsYXNzIE15Q29uc3RydWN0IGV4dGVuZHMgQ29uc3RydWN0IHtcbiAgcHVibGljIHN0YXRpYyBJc015Q29uc3RydWN0KHg6IGFueSk6IHggaXMgTXlDb25zdHJ1Y3Qge1xuICAgIHJldHVybiB4LnZpc2l0Q291bnRlciAhPT0gdW5kZWZpbmVkO1xuICB9XG4gIHB1YmxpYyB2aXNpdENvdW50ZXI6IG51bWJlciA9IDA7XG59XG5cbmNsYXNzIFZpc2l0T25jZSBpbXBsZW1lbnRzIElBc3BlY3Qge1xuICBwdWJsaWMgdmlzaXQobm9kZTogSUNvbnN0cnVjdCk6IHZvaWQge1xuICAgIGlmIChNeUNvbnN0cnVjdC5Jc015Q29uc3RydWN0KG5vZGUpKSB7XG4gICAgICBub2RlLnZpc2l0Q291bnRlciArPSAxO1xuICAgIH1cbiAgfVxufVxuXG5jbGFzcyBNeUFzcGVjdCBpbXBsZW1lbnRzIElBc3BlY3Qge1xuICBwdWJsaWMgdmlzaXQobm9kZTogSUNvbnN0cnVjdCk6IHZvaWQge1xuICAgIG5vZGUubm9kZS5hZGRNZXRhZGF0YSgnZm9vJywgJ2JhcicpO1xuICB9XG59XG5cbmRlc2NyaWJlKCdhc3BlY3QnLCAoKSA9PiB7XG4gIHRlc3QoJ0FzcGVjdHMgYXJlIGludm9rZWQgb25seSBvbmNlJywgKCkgPT4ge1xuICAgIGNvbnN0IGFwcCA9IG5ldyBBcHAoKTtcbiAgICBjb25zdCByb290ID0gbmV3IE15Q29uc3RydWN0KGFwcCwgJ015Q29uc3RydWN0Jyk7XG4gICAgQXNwZWN0cy5vZihyb290KS5hZGQobmV3IFZpc2l0T25jZSgpKTtcbiAgICBhcHAuc3ludGgoKTtcbiAgICBleHBlY3Qocm9vdC52aXNpdENvdW50ZXIpLnRvRXF1YWwoMSk7XG4gICAgYXBwLnN5bnRoKCk7XG4gICAgZXhwZWN0KHJvb3QudmlzaXRDb3VudGVyKS50b0VxdWFsKDEpO1xuICB9KTtcblxuICB0ZXN0KCdXYXJuIGlmIGFuIEFzcGVjdCBpcyBhZGRlZCB2aWEgYW5vdGhlciBBc3BlY3QnLCAoKSA9PiB7XG4gICAgY29uc3QgYXBwID0gbmV3IEFwcCgpO1xuICAgIGNvbnN0IHJvb3QgPSBuZXcgTXlDb25zdHJ1Y3QoYXBwLCAnTXlDb25zdHJ1Y3QnKTtcbiAgICBjb25zdCBjaGlsZCA9IG5ldyBNeUNvbnN0cnVjdChyb290LCAnQ2hpbGRDb25zdHJ1Y3QnKTtcbiAgICBBc3BlY3RzLm9mKHJvb3QpLmFkZCh7XG4gICAgICB2aXNpdChjb25zdHJ1Y3Q6IElDb25zdHJ1Y3QpIHtcbiAgICAgICAgQXNwZWN0cy5vZihjb25zdHJ1Y3QpLmFkZCh7XG4gICAgICAgICAgdmlzaXQoaW5uZXI6IElDb25zdHJ1Y3QpIHtcbiAgICAgICAgICAgIGlubmVyLm5vZGUuYWRkTWV0YWRhdGEoJ3Rlc3QnLCAnd291bGQtYmUtaWdub3JlZCcpO1xuICAgICAgICAgIH0sXG4gICAgICAgIH0pO1xuICAgICAgfSxcbiAgICB9KTtcbiAgICBhcHAuc3ludGgoKTtcbiAgICBleHBlY3Qocm9vdC5ub2RlLm1ldGFkYXRhWzBdLnR5cGUpLnRvRXF1YWwoY3hzY2hlbWEuQXJ0aWZhY3RNZXRhZGF0YUVudHJ5VHlwZS5XQVJOKTtcbiAgICBleHBlY3Qocm9vdC5ub2RlLm1ldGFkYXRhWzBdLmRhdGEpLnRvRXF1YWwoJ1dlIGRldGVjdGVkIGFuIEFzcGVjdCB3YXMgYWRkZWQgdmlhIGFub3RoZXIgQXNwZWN0LCBhbmQgd2lsbCBub3QgYmUgYXBwbGllZCcpO1xuICAgIC8vIHdhcm5pbmcgaXMgbm90IGFkZGVkIHRvIGNoaWxkIGNvbnN0cnVjdFxuICAgIGV4cGVjdChjaGlsZC5ub2RlLm1ldGFkYXRhLmxlbmd0aCkudG9FcXVhbCgwKTtcbiAgfSk7XG5cbiAgdGVzdCgnRG8gbm90IHdhcm4gaWYgYW4gQXNwZWN0IGlzIGFkZGVkIGRpcmVjdGx5IChub3QgYnkgYW5vdGhlciBhc3BlY3QpJywgKCkgPT4ge1xuICAgIGNvbnN0IGFwcCA9IG5ldyBBcHAoKTtcbiAgICBjb25zdCByb290ID0gbmV3IE15Q29uc3RydWN0KGFwcCwgJ0NvbnN0cnVjdCcpO1xuICAgIGNvbnN0IGNoaWxkID0gbmV3IE15Q29uc3RydWN0KHJvb3QsICdDaGlsZENvbnN0cnVjdCcpO1xuICAgIEFzcGVjdHMub2Yocm9vdCkuYWRkKG5ldyBNeUFzcGVjdCgpKTtcbiAgICBhcHAuc3ludGgoKTtcbiAgICBleHBlY3Qocm9vdC5ub2RlLm1ldGFkYXRhWzBdLnR5cGUpLnRvRXF1YWwoJ2ZvbycpO1xuICAgIGV4cGVjdChyb290Lm5vZGUubWV0YWRhdGFbMF0uZGF0YSkudG9FcXVhbCgnYmFyJyk7XG4gICAgZXhwZWN0KGNoaWxkLm5vZGUubWV0YWRhdGFbMF0udHlwZSkudG9FcXVhbCgnZm9vJyk7XG4gICAgZXhwZWN0KGNoaWxkLm5vZGUubWV0YWRhdGFbMF0uZGF0YSkudG9FcXVhbCgnYmFyJyk7XG4gICAgLy8gbm8gd2FybmluZyBpcyBhZGRlZFxuICAgIGV4cGVjdChyb290Lm5vZGUubWV0YWRhdGEubGVuZ3RoKS50b0VxdWFsKDEpO1xuICAgIGV4cGVjdChjaGlsZC5ub2RlLm1ldGFkYXRhLmxlbmd0aCkudG9FcXVhbCgxKTtcbiAgfSk7XG59KTtcbiJdfQ==