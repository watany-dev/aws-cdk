"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const cxschema = require("@aws-cdk/cloud-assembly-schema");
const cxapi = require("@aws-cdk/cx-api");
const lib_1 = require("../lib");
describe('stage', () => {
    test('Stack inherits unspecified part of the env from Stage', () => {
        // GIVEN
        const app = new lib_1.App();
        const stage = new lib_1.Stage(app, 'Stage', {
            env: { account: 'account', region: 'region' },
        });
        // WHEN
        const stack1 = new lib_1.Stack(stage, 'Stack1', { env: { region: 'elsewhere' } });
        const stack2 = new lib_1.Stack(stage, 'Stack2', { env: { account: 'tnuocca' } });
        // THEN
        expect(acctRegion(stack1)).toEqual(['account', 'elsewhere']);
        expect(acctRegion(stack2)).toEqual(['tnuocca', 'region']);
    });
    test('envs are inherited deeply', () => {
        // GIVEN
        const app = new lib_1.App();
        const outer = new lib_1.Stage(app, 'Stage', {
            env: { account: 'account', region: 'region' },
        });
        // WHEN
        const innerAcct = new lib_1.Stage(outer, 'Acct', { env: { account: 'tnuocca' } });
        const innerRegion = new lib_1.Stage(outer, 'Rgn', { env: { region: 'elsewhere' } });
        const innerNeither = new lib_1.Stage(outer, 'Neither');
        // THEN
        expect(acctRegion(new lib_1.Stack(innerAcct, 'Stack'))).toEqual(['tnuocca', 'region']);
        expect(acctRegion(new lib_1.Stack(innerRegion, 'Stack'))).toEqual(['account', 'elsewhere']);
        expect(acctRegion(new lib_1.Stack(innerNeither, 'Stack'))).toEqual(['account', 'region']);
    });
    test('The Stage Assembly is in the app Assembly\'s manifest', () => {
        // WHEN
        const app = new lib_1.App();
        const stage = new lib_1.Stage(app, 'Stage');
        new BogusStack(stage, 'Stack2');
        // THEN -- app manifest contains a nested cloud assembly
        const appAsm = app.synth();
        const artifact = appAsm.artifacts.find(x => x instanceof cxapi.NestedCloudAssemblyArtifact);
        expect(artifact).toBeDefined();
    });
    test('Stacks in Stage are in a different cxasm than Stacks in App', () => {
        // WHEN
        const app = new lib_1.App();
        const stack1 = new BogusStack(app, 'Stack1');
        const stage = new lib_1.Stage(app, 'Stage');
        const stack2 = new BogusStack(stage, 'Stack2');
        // THEN
        const stageAsm = stage.synth();
        expect(stageAsm.stacks.map(s => s.stackName)).toEqual([stack2.stackName]);
        const appAsm = app.synth();
        expect(appAsm.stacks.map(s => s.stackName)).toEqual([stack1.stackName]);
    });
    test('Can nest Stages inside other Stages', () => {
        // WHEN
        const app = new lib_1.App();
        const outer = new lib_1.Stage(app, 'Outer');
        const inner = new lib_1.Stage(outer, 'Inner');
        const stack = new BogusStack(inner, 'Stack');
        // WHEN
        const appAsm = app.synth();
        const outerAsm = appAsm.getNestedAssembly(outer.artifactId);
        const innerAsm = outerAsm.getNestedAssembly(inner.artifactId);
        expect(innerAsm.tryGetArtifact(stack.artifactId)).toBeDefined();
    });
    test('Default stack name in Stage objects incorporates the Stage name and no hash', () => {
        // WHEN
        const app = new lib_1.App();
        const stage = new lib_1.Stage(app, 'MyStage');
        const stack = new BogusStack(stage, 'MyStack');
        // THEN
        expect(stage.stageName).toEqual('MyStage');
        expect(stack.stackName).toEqual('MyStage-MyStack');
    });
    test('can override the stage name', () => {
        // WHEN
        const app = new lib_1.App();
        const stage = new lib_1.Stage(app, 'NotMyStageName', { stageName: 'MyStage' });
        const stack = new BogusStack(stage, 'MyStack');
        // THEN
        expect(stage.stageName).toEqual('MyStage');
        expect(stack.stackName).toEqual('MyStage-MyStack');
    });
    test('Can not have dependencies to stacks outside the nested asm', () => {
        // GIVEN
        const app = new lib_1.App();
        const stack1 = new BogusStack(app, 'Stack1');
        const stage = new lib_1.Stage(app, 'MyStage');
        const stack2 = new BogusStack(stage, 'Stack2');
        // WHEN
        expect(() => {
            stack2.addDependency(stack1);
        }).toThrow(/dependency cannot cross stage boundaries/);
    });
    test('When we synth() a stage, aspects inside it must have been applied', () => {
        // GIVEN
        const app = new lib_1.App();
        const stage = new lib_1.Stage(app, 'MyStage');
        const stack = new BogusStack(stage, 'Stack');
        // WHEN
        const aspect = new TouchingAspect();
        lib_1.Aspects.of(stack).add(aspect);
        // THEN
        app.synth();
        expect(aspect.visits.map(c => c.node.path)).toEqual([
            'MyStage/Stack',
            'MyStage/Stack/Resource',
        ]);
    });
    test('Aspects do not apply inside a Stage', () => {
        // GIVEN
        const app = new lib_1.App();
        const stage = new lib_1.Stage(app, 'MyStage');
        new BogusStack(stage, 'Stack');
        // WHEN
        const aspect = new TouchingAspect();
        lib_1.Aspects.of(app).add(aspect);
        // THEN
        app.synth();
        expect(aspect.visits.map(c => c.node.path)).toEqual([
            '',
            'Tree',
        ]);
    });
    test('Automatic dependencies inside a stage are available immediately after synth', () => {
        // GIVEN
        const app = new lib_1.App({ context: { [cxapi.NEW_STYLE_STACK_SYNTHESIS_CONTEXT]: false } });
        const stage = new lib_1.Stage(app, 'MyStage');
        const stack1 = new lib_1.Stack(stage, 'Stack1');
        const stack2 = new lib_1.Stack(stage, 'Stack2');
        // WHEN
        const resource1 = new lib_1.CfnResource(stack1, 'Resource', {
            type: 'CDK::Test::Resource',
        });
        new lib_1.CfnResource(stack2, 'Resource', {
            type: 'CDK::Test::Resource',
            properties: {
                OtherThing: resource1.ref,
            },
        });
        const asm = stage.synth();
        // THEN
        expect(asm.getStackArtifact(stack2.artifactId).dependencies.map(d => d.id)).toEqual([stack1.artifactId]);
    });
    test('Assemblies can be deeply nested', () => {
        // GIVEN
        const app = new lib_1.App({ treeMetadata: false });
        const level1 = new lib_1.Stage(app, 'StageLevel1');
        const level2 = new lib_1.Stage(level1, 'StageLevel2');
        new lib_1.Stage(level2, 'StageLevel3');
        // WHEN
        const rootAssembly = app.synth();
        // THEN
        expect(rootAssembly.manifest.artifacts).toEqual({
            'assembly-StageLevel1': {
                type: 'cdk:cloud-assembly',
                properties: {
                    directoryName: 'assembly-StageLevel1',
                    displayName: 'StageLevel1',
                },
            },
        });
        const assemblyLevel1 = rootAssembly.getNestedAssembly('assembly-StageLevel1');
        expect(assemblyLevel1.manifest.artifacts).toEqual({
            'assembly-StageLevel1-StageLevel2': {
                type: 'cdk:cloud-assembly',
                properties: {
                    directoryName: 'assembly-StageLevel1-StageLevel2',
                    displayName: 'StageLevel1/StageLevel2',
                },
            },
        });
        const assemblyLevel2 = assemblyLevel1.getNestedAssembly('assembly-StageLevel1-StageLevel2');
        expect(assemblyLevel2.manifest.artifacts).toEqual({
            'assembly-StageLevel1-StageLevel2-StageLevel3': {
                type: 'cdk:cloud-assembly',
                properties: {
                    directoryName: 'assembly-StageLevel1-StageLevel2-StageLevel3',
                    displayName: 'StageLevel1/StageLevel2/StageLevel3',
                },
            },
        });
    });
    test('stage name validation', () => {
        const app = new lib_1.App();
        new lib_1.Stage(app, 'abcd');
        new lib_1.Stage(app, 'abcd123');
        new lib_1.Stage(app, 'abcd123-588dfjjk');
        new lib_1.Stage(app, 'abcd123-588dfjjk.sss');
        new lib_1.Stage(app, 'abcd123-588dfjjk.sss_ajsid');
        expect(() => new lib_1.Stage(app, 'abcd123-588dfjjk.sss_ajsid ')).toThrow(/invalid stage name "abcd123-588dfjjk.sss_ajsid "/);
        expect(() => new lib_1.Stage(app, 'abcd123-588dfjjk.sss_ajsid/dfo')).toThrow(/invalid stage name "abcd123-588dfjjk.sss_ajsid\/dfo"/);
        expect(() => new lib_1.Stage(app, '&')).toThrow(/invalid stage name "&"/);
        expect(() => new lib_1.Stage(app, '45hello')).toThrow(/invalid stage name "45hello"/);
        expect(() => new lib_1.Stage(app, 'f')).toThrow(/invalid stage name "f"/);
    });
    test('outdir cannot be specified for nested stages', () => {
        // WHEN
        const app = new lib_1.App();
        // THEN
        expect(() => new lib_1.Stage(app, 'mystage', { outdir: '/tmp/foo/bar' })).toThrow(/"outdir" cannot be specified for nested stages/);
    });
    test('Stage.isStage indicates that a construct is a stage', () => {
        // WHEN
        const app = new lib_1.App();
        const stack = new lib_1.Stack();
        const stage = new lib_1.Stage(app, 'Stage');
        // THEN
        expect(lib_1.Stage.isStage(stage)).toEqual(true);
        expect(lib_1.Stage.isStage(app)).toEqual(true);
        expect(lib_1.Stage.isStage(stack)).toEqual(false);
    });
    test('Stage.isStage indicates that a construct is a stage based on symbol', () => {
        // WHEN
        const app = new lib_1.App();
        const stage = new lib_1.Stage(app, 'Stage');
        const externalStage = {};
        const STAGE_SYMBOL = Symbol.for('@aws-cdk/core.Stage');
        Object.defineProperty(externalStage, STAGE_SYMBOL, { value: true });
        // THEN
        expect(lib_1.Stage.isStage(stage)).toEqual(true);
        expect(lib_1.Stage.isStage(app)).toEqual(true);
        expect(lib_1.Stage.isStage(externalStage)).toEqual(true);
    });
});
test('missing context in Stages is propagated up to root assembly', () => {
    // GIVEN
    const app = new lib_1.App();
    const stage = new lib_1.Stage(app, 'Stage', {
        env: { account: 'account', region: 'region' },
    });
    const stack = new lib_1.Stack(stage, 'Stack');
    new lib_1.CfnResource(stack, 'Resource', { type: 'Something' });
    // WHEN
    stack.reportMissingContextKey({
        key: 'missing-context-key',
        provider: cxschema.ContextProvider.AVAILABILITY_ZONE_PROVIDER,
        props: {
            account: 'account',
            region: 'region',
        },
    });
    // THEN
    const assembly = app.synth();
    expect(assembly.manifest.missing).toEqual([
        {
            key: 'missing-context-key',
            provider: cxschema.ContextProvider.AVAILABILITY_ZONE_PROVIDER,
            props: {
                account: 'account',
                lookupRoleArn: 'arn:${AWS::Partition}:iam::account:role/cdk-hnb659fds-lookup-role-account-region',
                region: 'region',
            },
        },
    ]);
});
class TouchingAspect {
    constructor() {
        this.visits = new Array();
    }
    visit(node) {
        this.visits.push(node);
    }
}
class BogusStack extends lib_1.Stack {
    constructor(scope, id) {
        super(scope, id);
        new lib_1.CfnResource(this, 'Resource', {
            type: 'CDK::Test::Resource',
        });
    }
}
function acctRegion(s) {
    return [s.account, s.region];
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3RhZ2UudGVzdC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbInN0YWdlLnRlc3QudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSwyREFBMkQ7QUFDM0QseUNBQXlDO0FBRXpDLGdDQUEwRTtBQUUxRSxRQUFRLENBQUMsT0FBTyxFQUFFLEdBQUcsRUFBRTtJQUNyQixJQUFJLENBQUMsdURBQXVELEVBQUUsR0FBRyxFQUFFO1FBQ2pFLFFBQVE7UUFDUixNQUFNLEdBQUcsR0FBRyxJQUFJLFNBQUcsRUFBRSxDQUFDO1FBQ3RCLE1BQU0sS0FBSyxHQUFHLElBQUksV0FBSyxDQUFDLEdBQUcsRUFBRSxPQUFPLEVBQUU7WUFDcEMsR0FBRyxFQUFFLEVBQUUsT0FBTyxFQUFFLFNBQVMsRUFBRSxNQUFNLEVBQUUsUUFBUSxFQUFFO1NBQzlDLENBQUMsQ0FBQztRQUVILE9BQU87UUFDUCxNQUFNLE1BQU0sR0FBRyxJQUFJLFdBQUssQ0FBQyxLQUFLLEVBQUUsUUFBUSxFQUFFLEVBQUUsR0FBRyxFQUFFLEVBQUUsTUFBTSxFQUFFLFdBQVcsRUFBRSxFQUFFLENBQUMsQ0FBQztRQUM1RSxNQUFNLE1BQU0sR0FBRyxJQUFJLFdBQUssQ0FBQyxLQUFLLEVBQUUsUUFBUSxFQUFFLEVBQUUsR0FBRyxFQUFFLEVBQUUsT0FBTyxFQUFFLFNBQVMsRUFBRSxFQUFFLENBQUMsQ0FBQztRQUUzRSxPQUFPO1FBQ1AsTUFBTSxDQUFDLFVBQVUsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLFNBQVMsRUFBRSxXQUFXLENBQUMsQ0FBQyxDQUFDO1FBQzdELE1BQU0sQ0FBQyxVQUFVLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxTQUFTLEVBQUUsUUFBUSxDQUFDLENBQUMsQ0FBQztJQUM1RCxDQUFDLENBQUMsQ0FBQztJQUVILElBQUksQ0FBQywyQkFBMkIsRUFBRSxHQUFHLEVBQUU7UUFDckMsUUFBUTtRQUNSLE1BQU0sR0FBRyxHQUFHLElBQUksU0FBRyxFQUFFLENBQUM7UUFDdEIsTUFBTSxLQUFLLEdBQUcsSUFBSSxXQUFLLENBQUMsR0FBRyxFQUFFLE9BQU8sRUFBRTtZQUNwQyxHQUFHLEVBQUUsRUFBRSxPQUFPLEVBQUUsU0FBUyxFQUFFLE1BQU0sRUFBRSxRQUFRLEVBQUU7U0FDOUMsQ0FBQyxDQUFDO1FBRUgsT0FBTztRQUNQLE1BQU0sU0FBUyxHQUFHLElBQUksV0FBSyxDQUFDLEtBQUssRUFBRSxNQUFNLEVBQUUsRUFBRSxHQUFHLEVBQUUsRUFBRSxPQUFPLEVBQUUsU0FBUyxFQUFFLEVBQUUsQ0FBQyxDQUFDO1FBQzVFLE1BQU0sV0FBVyxHQUFHLElBQUksV0FBSyxDQUFDLEtBQUssRUFBRSxLQUFLLEVBQUUsRUFBRSxHQUFHLEVBQUUsRUFBRSxNQUFNLEVBQUUsV0FBVyxFQUFFLEVBQUUsQ0FBQyxDQUFDO1FBQzlFLE1BQU0sWUFBWSxHQUFHLElBQUksV0FBSyxDQUFDLEtBQUssRUFBRSxTQUFTLENBQUMsQ0FBQztRQUVqRCxPQUFPO1FBQ1AsTUFBTSxDQUFDLFVBQVUsQ0FBQyxJQUFJLFdBQUssQ0FBQyxTQUFTLEVBQUUsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLFNBQVMsRUFBRSxRQUFRLENBQUMsQ0FBQyxDQUFDO1FBQ2pGLE1BQU0sQ0FBQyxVQUFVLENBQUMsSUFBSSxXQUFLLENBQUMsV0FBVyxFQUFFLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxTQUFTLEVBQUUsV0FBVyxDQUFDLENBQUMsQ0FBQztRQUN0RixNQUFNLENBQUMsVUFBVSxDQUFDLElBQUksV0FBSyxDQUFDLFlBQVksRUFBRSxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsU0FBUyxFQUFFLFFBQVEsQ0FBQyxDQUFDLENBQUM7SUFDdEYsQ0FBQyxDQUFDLENBQUM7SUFFSCxJQUFJLENBQUMsdURBQXVELEVBQUUsR0FBRyxFQUFFO1FBQ2pFLE9BQU87UUFDUCxNQUFNLEdBQUcsR0FBRyxJQUFJLFNBQUcsRUFBRSxDQUFDO1FBQ3RCLE1BQU0sS0FBSyxHQUFHLElBQUksV0FBSyxDQUFDLEdBQUcsRUFBRSxPQUFPLENBQUMsQ0FBQztRQUN0QyxJQUFJLFVBQVUsQ0FBQyxLQUFLLEVBQUUsUUFBUSxDQUFDLENBQUM7UUFFaEMsd0RBQXdEO1FBQ3hELE1BQU0sTUFBTSxHQUFHLEdBQUcsQ0FBQyxLQUFLLEVBQUUsQ0FBQztRQUUzQixNQUFNLFFBQVEsR0FBRyxNQUFNLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsWUFBWSxLQUFLLENBQUMsMkJBQTJCLENBQUMsQ0FBQztRQUM1RixNQUFNLENBQUMsUUFBUSxDQUFDLENBQUMsV0FBVyxFQUFFLENBQUM7SUFDakMsQ0FBQyxDQUFDLENBQUM7SUFFSCxJQUFJLENBQUMsNkRBQTZELEVBQUUsR0FBRyxFQUFFO1FBQ3ZFLE9BQU87UUFDUCxNQUFNLEdBQUcsR0FBRyxJQUFJLFNBQUcsRUFBRSxDQUFDO1FBQ3RCLE1BQU0sTUFBTSxHQUFHLElBQUksVUFBVSxDQUFDLEdBQUcsRUFBRSxRQUFRLENBQUMsQ0FBQztRQUM3QyxNQUFNLEtBQUssR0FBRyxJQUFJLFdBQUssQ0FBQyxHQUFHLEVBQUUsT0FBTyxDQUFDLENBQUM7UUFDdEMsTUFBTSxNQUFNLEdBQUcsSUFBSSxVQUFVLENBQUMsS0FBSyxFQUFFLFFBQVEsQ0FBQyxDQUFDO1FBRS9DLE9BQU87UUFDUCxNQUFNLFFBQVEsR0FBRyxLQUFLLENBQUMsS0FBSyxFQUFFLENBQUM7UUFDL0IsTUFBTSxDQUFDLFFBQVEsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsTUFBTSxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUM7UUFFMUUsTUFBTSxNQUFNLEdBQUcsR0FBRyxDQUFDLEtBQUssRUFBRSxDQUFDO1FBQzNCLE1BQU0sQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLE1BQU0sQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDO0lBQzFFLENBQUMsQ0FBQyxDQUFDO0lBRUgsSUFBSSxDQUFDLHFDQUFxQyxFQUFFLEdBQUcsRUFBRTtRQUMvQyxPQUFPO1FBQ1AsTUFBTSxHQUFHLEdBQUcsSUFBSSxTQUFHLEVBQUUsQ0FBQztRQUN0QixNQUFNLEtBQUssR0FBRyxJQUFJLFdBQUssQ0FBQyxHQUFHLEVBQUUsT0FBTyxDQUFDLENBQUM7UUFDdEMsTUFBTSxLQUFLLEdBQUcsSUFBSSxXQUFLLENBQUMsS0FBSyxFQUFFLE9BQU8sQ0FBQyxDQUFDO1FBQ3hDLE1BQU0sS0FBSyxHQUFHLElBQUksVUFBVSxDQUFDLEtBQUssRUFBRSxPQUFPLENBQUMsQ0FBQztRQUU3QyxPQUFPO1FBQ1AsTUFBTSxNQUFNLEdBQUcsR0FBRyxDQUFDLEtBQUssRUFBRSxDQUFDO1FBQzNCLE1BQU0sUUFBUSxHQUFHLE1BQU0sQ0FBQyxpQkFBaUIsQ0FBQyxLQUFLLENBQUMsVUFBVSxDQUFDLENBQUM7UUFDNUQsTUFBTSxRQUFRLEdBQUcsUUFBUSxDQUFDLGlCQUFpQixDQUFDLEtBQUssQ0FBQyxVQUFVLENBQUMsQ0FBQztRQUU5RCxNQUFNLENBQUMsUUFBUSxDQUFDLGNBQWMsQ0FBQyxLQUFLLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQyxXQUFXLEVBQUUsQ0FBQztJQUNsRSxDQUFDLENBQUMsQ0FBQztJQUVILElBQUksQ0FBQyw2RUFBNkUsRUFBRSxHQUFHLEVBQUU7UUFDdkYsT0FBTztRQUNQLE1BQU0sR0FBRyxHQUFHLElBQUksU0FBRyxFQUFFLENBQUM7UUFDdEIsTUFBTSxLQUFLLEdBQUcsSUFBSSxXQUFLLENBQUMsR0FBRyxFQUFFLFNBQVMsQ0FBQyxDQUFDO1FBQ3hDLE1BQU0sS0FBSyxHQUFHLElBQUksVUFBVSxDQUFDLEtBQUssRUFBRSxTQUFTLENBQUMsQ0FBQztRQUUvQyxPQUFPO1FBQ1AsTUFBTSxDQUFDLEtBQUssQ0FBQyxTQUFTLENBQUMsQ0FBQyxPQUFPLENBQUMsU0FBUyxDQUFDLENBQUM7UUFDM0MsTUFBTSxDQUFDLEtBQUssQ0FBQyxTQUFTLENBQUMsQ0FBQyxPQUFPLENBQUMsaUJBQWlCLENBQUMsQ0FBQztJQUNyRCxDQUFDLENBQUMsQ0FBQztJQUVILElBQUksQ0FBQyw2QkFBNkIsRUFBRSxHQUFHLEVBQUU7UUFDdkMsT0FBTztRQUNQLE1BQU0sR0FBRyxHQUFHLElBQUksU0FBRyxFQUFFLENBQUM7UUFDdEIsTUFBTSxLQUFLLEdBQUcsSUFBSSxXQUFLLENBQUMsR0FBRyxFQUFFLGdCQUFnQixFQUFFLEVBQUUsU0FBUyxFQUFFLFNBQVMsRUFBRSxDQUFDLENBQUM7UUFDekUsTUFBTSxLQUFLLEdBQUcsSUFBSSxVQUFVLENBQUMsS0FBSyxFQUFFLFNBQVMsQ0FBQyxDQUFDO1FBRS9DLE9BQU87UUFDUCxNQUFNLENBQUMsS0FBSyxDQUFDLFNBQVMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxTQUFTLENBQUMsQ0FBQztRQUMzQyxNQUFNLENBQUMsS0FBSyxDQUFDLFNBQVMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDO0lBQ3JELENBQUMsQ0FBQyxDQUFDO0lBRUgsSUFBSSxDQUFDLDREQUE0RCxFQUFFLEdBQUcsRUFBRTtRQUN0RSxRQUFRO1FBQ1IsTUFBTSxHQUFHLEdBQUcsSUFBSSxTQUFHLEVBQUUsQ0FBQztRQUN0QixNQUFNLE1BQU0sR0FBRyxJQUFJLFVBQVUsQ0FBQyxHQUFHLEVBQUUsUUFBUSxDQUFDLENBQUM7UUFDN0MsTUFBTSxLQUFLLEdBQUcsSUFBSSxXQUFLLENBQUMsR0FBRyxFQUFFLFNBQVMsQ0FBQyxDQUFDO1FBQ3hDLE1BQU0sTUFBTSxHQUFHLElBQUksVUFBVSxDQUFDLEtBQUssRUFBRSxRQUFRLENBQUMsQ0FBQztRQUUvQyxPQUFPO1FBQ1AsTUFBTSxDQUFDLEdBQUcsRUFBRTtZQUNWLE1BQU0sQ0FBQyxhQUFhLENBQUMsTUFBTSxDQUFDLENBQUM7UUFDL0IsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLDBDQUEwQyxDQUFDLENBQUM7SUFDekQsQ0FBQyxDQUFDLENBQUM7SUFFSCxJQUFJLENBQUMsbUVBQW1FLEVBQUUsR0FBRyxFQUFFO1FBQzdFLFFBQVE7UUFDUixNQUFNLEdBQUcsR0FBRyxJQUFJLFNBQUcsRUFBRSxDQUFDO1FBQ3RCLE1BQU0sS0FBSyxHQUFHLElBQUksV0FBSyxDQUFDLEdBQUcsRUFBRSxTQUFTLENBQUMsQ0FBQztRQUN4QyxNQUFNLEtBQUssR0FBRyxJQUFJLFVBQVUsQ0FBQyxLQUFLLEVBQUUsT0FBTyxDQUFDLENBQUM7UUFFN0MsT0FBTztRQUNQLE1BQU0sTUFBTSxHQUFHLElBQUksY0FBYyxFQUFFLENBQUM7UUFDcEMsYUFBTyxDQUFDLEVBQUUsQ0FBQyxLQUFLLENBQUMsQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLENBQUM7UUFFOUIsT0FBTztRQUNQLEdBQUcsQ0FBQyxLQUFLLEVBQUUsQ0FBQztRQUNaLE1BQU0sQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUM7WUFDbEQsZUFBZTtZQUNmLHdCQUF3QjtTQUN6QixDQUFDLENBQUM7SUFDTCxDQUFDLENBQUMsQ0FBQztJQUVILElBQUksQ0FBQyxxQ0FBcUMsRUFBRSxHQUFHLEVBQUU7UUFDL0MsUUFBUTtRQUNSLE1BQU0sR0FBRyxHQUFHLElBQUksU0FBRyxFQUFFLENBQUM7UUFDdEIsTUFBTSxLQUFLLEdBQUcsSUFBSSxXQUFLLENBQUMsR0FBRyxFQUFFLFNBQVMsQ0FBQyxDQUFDO1FBQ3hDLElBQUksVUFBVSxDQUFDLEtBQUssRUFBRSxPQUFPLENBQUMsQ0FBQztRQUUvQixPQUFPO1FBQ1AsTUFBTSxNQUFNLEdBQUcsSUFBSSxjQUFjLEVBQUUsQ0FBQztRQUNwQyxhQUFPLENBQUMsRUFBRSxDQUFDLEdBQUcsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUU1QixPQUFPO1FBQ1AsR0FBRyxDQUFDLEtBQUssRUFBRSxDQUFDO1FBQ1osTUFBTSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQztZQUNsRCxFQUFFO1lBQ0YsTUFBTTtTQUNQLENBQUMsQ0FBQztJQUNMLENBQUMsQ0FBQyxDQUFDO0lBRUgsSUFBSSxDQUFDLDZFQUE2RSxFQUFFLEdBQUcsRUFBRTtRQUN2RixRQUFRO1FBQ1IsTUFBTSxHQUFHLEdBQUcsSUFBSSxTQUFHLENBQUMsRUFBRSxPQUFPLEVBQUUsRUFBRSxDQUFDLEtBQUssQ0FBQyxpQ0FBaUMsQ0FBQyxFQUFFLEtBQUssRUFBRSxFQUFFLENBQUMsQ0FBQztRQUN2RixNQUFNLEtBQUssR0FBRyxJQUFJLFdBQUssQ0FBQyxHQUFHLEVBQUUsU0FBUyxDQUFDLENBQUM7UUFDeEMsTUFBTSxNQUFNLEdBQUcsSUFBSSxXQUFLLENBQUMsS0FBSyxFQUFFLFFBQVEsQ0FBQyxDQUFDO1FBQzFDLE1BQU0sTUFBTSxHQUFHLElBQUksV0FBSyxDQUFDLEtBQUssRUFBRSxRQUFRLENBQUMsQ0FBQztRQUUxQyxPQUFPO1FBQ1AsTUFBTSxTQUFTLEdBQUcsSUFBSSxpQkFBVyxDQUFDLE1BQU0sRUFBRSxVQUFVLEVBQUU7WUFDcEQsSUFBSSxFQUFFLHFCQUFxQjtTQUM1QixDQUFDLENBQUM7UUFDSCxJQUFJLGlCQUFXLENBQUMsTUFBTSxFQUFFLFVBQVUsRUFBRTtZQUNsQyxJQUFJLEVBQUUscUJBQXFCO1lBQzNCLFVBQVUsRUFBRTtnQkFDVixVQUFVLEVBQUUsU0FBUyxDQUFDLEdBQUc7YUFDMUI7U0FDRixDQUFDLENBQUM7UUFFSCxNQUFNLEdBQUcsR0FBRyxLQUFLLENBQUMsS0FBSyxFQUFFLENBQUM7UUFFMUIsT0FBTztRQUNQLE1BQU0sQ0FDSixHQUFHLENBQUMsZ0JBQWdCLENBQUMsTUFBTSxDQUFDLFVBQVUsQ0FBQyxDQUFDLFlBQVksQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQzVFLENBQUMsTUFBTSxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUM7SUFDekIsQ0FBQyxDQUFDLENBQUM7SUFFSCxJQUFJLENBQUMsaUNBQWlDLEVBQUUsR0FBRyxFQUFFO1FBQzNDLFFBQVE7UUFDUixNQUFNLEdBQUcsR0FBRyxJQUFJLFNBQUcsQ0FBQyxFQUFFLFlBQVksRUFBRSxLQUFLLEVBQUUsQ0FBQyxDQUFDO1FBRTdDLE1BQU0sTUFBTSxHQUFHLElBQUksV0FBSyxDQUFDLEdBQUcsRUFBRSxhQUFhLENBQUMsQ0FBQztRQUM3QyxNQUFNLE1BQU0sR0FBRyxJQUFJLFdBQUssQ0FBQyxNQUFNLEVBQUUsYUFBYSxDQUFDLENBQUM7UUFDaEQsSUFBSSxXQUFLLENBQUMsTUFBTSxFQUFFLGFBQWEsQ0FBQyxDQUFDO1FBRWpDLE9BQU87UUFDUCxNQUFNLFlBQVksR0FBRyxHQUFHLENBQUMsS0FBSyxFQUFFLENBQUM7UUFFakMsT0FBTztRQUNQLE1BQU0sQ0FBQyxZQUFZLENBQUMsUUFBUSxDQUFDLFNBQVMsQ0FBQyxDQUFDLE9BQU8sQ0FBQztZQUM5QyxzQkFBc0IsRUFBRTtnQkFDdEIsSUFBSSxFQUFFLG9CQUFvQjtnQkFDMUIsVUFBVSxFQUFFO29CQUNWLGFBQWEsRUFBRSxzQkFBc0I7b0JBQ3JDLFdBQVcsRUFBRSxhQUFhO2lCQUMzQjthQUNGO1NBQ0YsQ0FBQyxDQUFDO1FBRUgsTUFBTSxjQUFjLEdBQUcsWUFBWSxDQUFDLGlCQUFpQixDQUFDLHNCQUFzQixDQUFDLENBQUM7UUFDOUUsTUFBTSxDQUFDLGNBQWMsQ0FBQyxRQUFRLENBQUMsU0FBUyxDQUFDLENBQUMsT0FBTyxDQUFDO1lBQ2hELGtDQUFrQyxFQUFFO2dCQUNsQyxJQUFJLEVBQUUsb0JBQW9CO2dCQUMxQixVQUFVLEVBQUU7b0JBQ1YsYUFBYSxFQUFFLGtDQUFrQztvQkFDakQsV0FBVyxFQUFFLHlCQUF5QjtpQkFDdkM7YUFDRjtTQUNGLENBQUMsQ0FBQztRQUVILE1BQU0sY0FBYyxHQUFHLGNBQWMsQ0FBQyxpQkFBaUIsQ0FBQyxrQ0FBa0MsQ0FBQyxDQUFDO1FBQzVGLE1BQU0sQ0FBQyxjQUFjLENBQUMsUUFBUSxDQUFDLFNBQVMsQ0FBQyxDQUFDLE9BQU8sQ0FBQztZQUNoRCw4Q0FBOEMsRUFBRTtnQkFDOUMsSUFBSSxFQUFFLG9CQUFvQjtnQkFDMUIsVUFBVSxFQUFFO29CQUNWLGFBQWEsRUFBRSw4Q0FBOEM7b0JBQzdELFdBQVcsRUFBRSxxQ0FBcUM7aUJBQ25EO2FBQ0Y7U0FDRixDQUFDLENBQUM7SUFDTCxDQUFDLENBQUMsQ0FBQztJQUVILElBQUksQ0FBQyx1QkFBdUIsRUFBRSxHQUFHLEVBQUU7UUFDakMsTUFBTSxHQUFHLEdBQUcsSUFBSSxTQUFHLEVBQUUsQ0FBQztRQUV0QixJQUFJLFdBQUssQ0FBQyxHQUFHLEVBQUUsTUFBTSxDQUFDLENBQUM7UUFDdkIsSUFBSSxXQUFLLENBQUMsR0FBRyxFQUFFLFNBQVMsQ0FBQyxDQUFDO1FBQzFCLElBQUksV0FBSyxDQUFDLEdBQUcsRUFBRSxrQkFBa0IsQ0FBQyxDQUFDO1FBQ25DLElBQUksV0FBSyxDQUFDLEdBQUcsRUFBRSxzQkFBc0IsQ0FBQyxDQUFDO1FBQ3ZDLElBQUksV0FBSyxDQUFDLEdBQUcsRUFBRSw0QkFBNEIsQ0FBQyxDQUFDO1FBRTdDLE1BQU0sQ0FBQyxHQUFHLEVBQUUsQ0FBQyxJQUFJLFdBQUssQ0FBQyxHQUFHLEVBQUUsNkJBQTZCLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxrREFBa0QsQ0FBQyxDQUFDO1FBQ3hILE1BQU0sQ0FBQyxHQUFHLEVBQUUsQ0FBQyxJQUFJLFdBQUssQ0FBQyxHQUFHLEVBQUUsZ0NBQWdDLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxzREFBc0QsQ0FBQyxDQUFDO1FBQy9ILE1BQU0sQ0FBQyxHQUFHLEVBQUUsQ0FBQyxJQUFJLFdBQUssQ0FBQyxHQUFHLEVBQUUsR0FBRyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsd0JBQXdCLENBQUMsQ0FBQztRQUNwRSxNQUFNLENBQUMsR0FBRyxFQUFFLENBQUMsSUFBSSxXQUFLLENBQUMsR0FBRyxFQUFFLFNBQVMsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLDhCQUE4QixDQUFDLENBQUM7UUFDaEYsTUFBTSxDQUFDLEdBQUcsRUFBRSxDQUFDLElBQUksV0FBSyxDQUFDLEdBQUcsRUFBRSxHQUFHLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyx3QkFBd0IsQ0FBQyxDQUFDO0lBQ3RFLENBQUMsQ0FBQyxDQUFDO0lBRUgsSUFBSSxDQUFDLDhDQUE4QyxFQUFFLEdBQUcsRUFBRTtRQUN4RCxPQUFPO1FBQ1AsTUFBTSxHQUFHLEdBQUcsSUFBSSxTQUFHLEVBQUUsQ0FBQztRQUV0QixPQUFPO1FBQ1AsTUFBTSxDQUFDLEdBQUcsRUFBRSxDQUFDLElBQUksV0FBSyxDQUFDLEdBQUcsRUFBRSxTQUFTLEVBQUUsRUFBRSxNQUFNLEVBQUUsY0FBYyxFQUFFLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxnREFBZ0QsQ0FBQyxDQUFDO0lBQ2hJLENBQUMsQ0FBQyxDQUFDO0lBRUgsSUFBSSxDQUFDLHFEQUFxRCxFQUFFLEdBQUcsRUFBRTtRQUMvRCxPQUFPO1FBQ1AsTUFBTSxHQUFHLEdBQUcsSUFBSSxTQUFHLEVBQUUsQ0FBQztRQUN0QixNQUFNLEtBQUssR0FBRyxJQUFJLFdBQUssRUFBRSxDQUFDO1FBQzFCLE1BQU0sS0FBSyxHQUFHLElBQUksV0FBSyxDQUFDLEdBQUcsRUFBRSxPQUFPLENBQUMsQ0FBQztRQUV0QyxPQUFPO1FBQ1AsTUFBTSxDQUFDLFdBQUssQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDM0MsTUFBTSxDQUFDLFdBQUssQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDekMsTUFBTSxDQUFDLFdBQUssQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLENBQUM7SUFDOUMsQ0FBQyxDQUFDLENBQUM7SUFFSCxJQUFJLENBQUMscUVBQXFFLEVBQUUsR0FBRyxFQUFFO1FBQy9FLE9BQU87UUFDUCxNQUFNLEdBQUcsR0FBRyxJQUFJLFNBQUcsRUFBRSxDQUFDO1FBQ3RCLE1BQU0sS0FBSyxHQUFHLElBQUksV0FBSyxDQUFDLEdBQUcsRUFBRSxPQUFPLENBQUMsQ0FBQztRQUV0QyxNQUFNLGFBQWEsR0FBRyxFQUFFLENBQUM7UUFDekIsTUFBTSxZQUFZLEdBQUcsTUFBTSxDQUFDLEdBQUcsQ0FBQyxxQkFBcUIsQ0FBQyxDQUFDO1FBQ3ZELE1BQU0sQ0FBQyxjQUFjLENBQUMsYUFBYSxFQUFFLFlBQVksRUFBRSxFQUFFLEtBQUssRUFBRSxJQUFJLEVBQUUsQ0FBQyxDQUFDO1FBRXBFLE9BQU87UUFDUCxNQUFNLENBQUMsV0FBSyxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUMzQyxNQUFNLENBQUMsV0FBSyxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUN6QyxNQUFNLENBQUMsV0FBSyxDQUFDLE9BQU8sQ0FBQyxhQUFhLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUNyRCxDQUFDLENBQUMsQ0FBQztBQUNMLENBQUMsQ0FBQyxDQUFDO0FBRUgsSUFBSSxDQUFDLDZEQUE2RCxFQUFFLEdBQUcsRUFBRTtJQUN2RSxRQUFRO0lBQ1IsTUFBTSxHQUFHLEdBQUcsSUFBSSxTQUFHLEVBQUUsQ0FBQztJQUN0QixNQUFNLEtBQUssR0FBRyxJQUFJLFdBQUssQ0FBQyxHQUFHLEVBQUUsT0FBTyxFQUFFO1FBQ3BDLEdBQUcsRUFBRSxFQUFFLE9BQU8sRUFBRSxTQUFTLEVBQUUsTUFBTSxFQUFFLFFBQVEsRUFBRTtLQUM5QyxDQUFDLENBQUM7SUFDSCxNQUFNLEtBQUssR0FBRyxJQUFJLFdBQUssQ0FBQyxLQUFLLEVBQUUsT0FBTyxDQUFDLENBQUM7SUFDeEMsSUFBSSxpQkFBVyxDQUFDLEtBQUssRUFBRSxVQUFVLEVBQUUsRUFBRSxJQUFJLEVBQUUsV0FBVyxFQUFFLENBQUMsQ0FBQztJQUUxRCxPQUFPO0lBQ1AsS0FBSyxDQUFDLHVCQUF1QixDQUFDO1FBQzVCLEdBQUcsRUFBRSxxQkFBcUI7UUFDMUIsUUFBUSxFQUFFLFFBQVEsQ0FBQyxlQUFlLENBQUMsMEJBQTBCO1FBQzdELEtBQUssRUFBRTtZQUNMLE9BQU8sRUFBRSxTQUFTO1lBQ2xCLE1BQU0sRUFBRSxRQUFRO1NBQ2pCO0tBQ0YsQ0FBQyxDQUFDO0lBRUgsT0FBTztJQUNQLE1BQU0sUUFBUSxHQUFHLEdBQUcsQ0FBQyxLQUFLLEVBQUUsQ0FBQztJQUU3QixNQUFNLENBQUMsUUFBUSxDQUFDLFFBQVEsQ0FBQyxPQUFPLENBQUMsQ0FBQyxPQUFPLENBQUM7UUFDeEM7WUFDRSxHQUFHLEVBQUUscUJBQXFCO1lBQzFCLFFBQVEsRUFBRSxRQUFRLENBQUMsZUFBZSxDQUFDLDBCQUEwQjtZQUM3RCxLQUFLLEVBQUU7Z0JBQ0wsT0FBTyxFQUFFLFNBQVM7Z0JBQ2xCLGFBQWEsRUFBRSxrRkFBa0Y7Z0JBQ2pHLE1BQU0sRUFBRSxRQUFRO2FBQ2pCO1NBQ0Y7S0FDRixDQUFDLENBQUM7QUFDTCxDQUFDLENBQUMsQ0FBQztBQUVILE1BQU0sY0FBYztJQUFwQjtRQUNrQixXQUFNLEdBQUcsSUFBSSxLQUFLLEVBQWMsQ0FBQztJQUluRCxDQUFDO0lBSFEsS0FBSyxDQUFDLElBQWdCO1FBQzNCLElBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO0lBQ3pCLENBQUM7Q0FDRjtBQUVELE1BQU0sVUFBVyxTQUFRLFdBQUs7SUFDNUIsWUFBWSxLQUFnQixFQUFFLEVBQVU7UUFDdEMsS0FBSyxDQUFDLEtBQUssRUFBRSxFQUFFLENBQUMsQ0FBQztRQUVqQixJQUFJLGlCQUFXLENBQUMsSUFBSSxFQUFFLFVBQVUsRUFBRTtZQUNoQyxJQUFJLEVBQUUscUJBQXFCO1NBQzVCLENBQUMsQ0FBQztJQUNMLENBQUM7Q0FDRjtBQUVELFNBQVMsVUFBVSxDQUFDLENBQVE7SUFDMUIsT0FBTyxDQUFDLENBQUMsQ0FBQyxPQUFPLEVBQUUsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDO0FBQy9CLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgKiBhcyBjeHNjaGVtYSBmcm9tICdAYXdzLWNkay9jbG91ZC1hc3NlbWJseS1zY2hlbWEnO1xuaW1wb3J0ICogYXMgY3hhcGkgZnJvbSAnQGF3cy1jZGsvY3gtYXBpJztcbmltcG9ydCB7IENvbnN0cnVjdCwgSUNvbnN0cnVjdCB9IGZyb20gJ2NvbnN0cnVjdHMnO1xuaW1wb3J0IHsgQXBwLCBDZm5SZXNvdXJjZSwgSUFzcGVjdCwgU3RhY2ssIFN0YWdlLCBBc3BlY3RzIH0gZnJvbSAnLi4vbGliJztcblxuZGVzY3JpYmUoJ3N0YWdlJywgKCkgPT4ge1xuICB0ZXN0KCdTdGFjayBpbmhlcml0cyB1bnNwZWNpZmllZCBwYXJ0IG9mIHRoZSBlbnYgZnJvbSBTdGFnZScsICgpID0+IHtcbiAgICAvLyBHSVZFTlxuICAgIGNvbnN0IGFwcCA9IG5ldyBBcHAoKTtcbiAgICBjb25zdCBzdGFnZSA9IG5ldyBTdGFnZShhcHAsICdTdGFnZScsIHtcbiAgICAgIGVudjogeyBhY2NvdW50OiAnYWNjb3VudCcsIHJlZ2lvbjogJ3JlZ2lvbicgfSxcbiAgICB9KTtcblxuICAgIC8vIFdIRU5cbiAgICBjb25zdCBzdGFjazEgPSBuZXcgU3RhY2soc3RhZ2UsICdTdGFjazEnLCB7IGVudjogeyByZWdpb246ICdlbHNld2hlcmUnIH0gfSk7XG4gICAgY29uc3Qgc3RhY2syID0gbmV3IFN0YWNrKHN0YWdlLCAnU3RhY2syJywgeyBlbnY6IHsgYWNjb3VudDogJ3RudW9jY2EnIH0gfSk7XG5cbiAgICAvLyBUSEVOXG4gICAgZXhwZWN0KGFjY3RSZWdpb24oc3RhY2sxKSkudG9FcXVhbChbJ2FjY291bnQnLCAnZWxzZXdoZXJlJ10pO1xuICAgIGV4cGVjdChhY2N0UmVnaW9uKHN0YWNrMikpLnRvRXF1YWwoWyd0bnVvY2NhJywgJ3JlZ2lvbiddKTtcbiAgfSk7XG5cbiAgdGVzdCgnZW52cyBhcmUgaW5oZXJpdGVkIGRlZXBseScsICgpID0+IHtcbiAgICAvLyBHSVZFTlxuICAgIGNvbnN0IGFwcCA9IG5ldyBBcHAoKTtcbiAgICBjb25zdCBvdXRlciA9IG5ldyBTdGFnZShhcHAsICdTdGFnZScsIHtcbiAgICAgIGVudjogeyBhY2NvdW50OiAnYWNjb3VudCcsIHJlZ2lvbjogJ3JlZ2lvbicgfSxcbiAgICB9KTtcblxuICAgIC8vIFdIRU5cbiAgICBjb25zdCBpbm5lckFjY3QgPSBuZXcgU3RhZ2Uob3V0ZXIsICdBY2N0JywgeyBlbnY6IHsgYWNjb3VudDogJ3RudW9jY2EnIH0gfSk7XG4gICAgY29uc3QgaW5uZXJSZWdpb24gPSBuZXcgU3RhZ2Uob3V0ZXIsICdSZ24nLCB7IGVudjogeyByZWdpb246ICdlbHNld2hlcmUnIH0gfSk7XG4gICAgY29uc3QgaW5uZXJOZWl0aGVyID0gbmV3IFN0YWdlKG91dGVyLCAnTmVpdGhlcicpO1xuXG4gICAgLy8gVEhFTlxuICAgIGV4cGVjdChhY2N0UmVnaW9uKG5ldyBTdGFjayhpbm5lckFjY3QsICdTdGFjaycpKSkudG9FcXVhbChbJ3RudW9jY2EnLCAncmVnaW9uJ10pO1xuICAgIGV4cGVjdChhY2N0UmVnaW9uKG5ldyBTdGFjayhpbm5lclJlZ2lvbiwgJ1N0YWNrJykpKS50b0VxdWFsKFsnYWNjb3VudCcsICdlbHNld2hlcmUnXSk7XG4gICAgZXhwZWN0KGFjY3RSZWdpb24obmV3IFN0YWNrKGlubmVyTmVpdGhlciwgJ1N0YWNrJykpKS50b0VxdWFsKFsnYWNjb3VudCcsICdyZWdpb24nXSk7XG4gIH0pO1xuXG4gIHRlc3QoJ1RoZSBTdGFnZSBBc3NlbWJseSBpcyBpbiB0aGUgYXBwIEFzc2VtYmx5XFwncyBtYW5pZmVzdCcsICgpID0+IHtcbiAgICAvLyBXSEVOXG4gICAgY29uc3QgYXBwID0gbmV3IEFwcCgpO1xuICAgIGNvbnN0IHN0YWdlID0gbmV3IFN0YWdlKGFwcCwgJ1N0YWdlJyk7XG4gICAgbmV3IEJvZ3VzU3RhY2soc3RhZ2UsICdTdGFjazInKTtcblxuICAgIC8vIFRIRU4gLS0gYXBwIG1hbmlmZXN0IGNvbnRhaW5zIGEgbmVzdGVkIGNsb3VkIGFzc2VtYmx5XG4gICAgY29uc3QgYXBwQXNtID0gYXBwLnN5bnRoKCk7XG5cbiAgICBjb25zdCBhcnRpZmFjdCA9IGFwcEFzbS5hcnRpZmFjdHMuZmluZCh4ID0+IHggaW5zdGFuY2VvZiBjeGFwaS5OZXN0ZWRDbG91ZEFzc2VtYmx5QXJ0aWZhY3QpO1xuICAgIGV4cGVjdChhcnRpZmFjdCkudG9CZURlZmluZWQoKTtcbiAgfSk7XG5cbiAgdGVzdCgnU3RhY2tzIGluIFN0YWdlIGFyZSBpbiBhIGRpZmZlcmVudCBjeGFzbSB0aGFuIFN0YWNrcyBpbiBBcHAnLCAoKSA9PiB7XG4gICAgLy8gV0hFTlxuICAgIGNvbnN0IGFwcCA9IG5ldyBBcHAoKTtcbiAgICBjb25zdCBzdGFjazEgPSBuZXcgQm9ndXNTdGFjayhhcHAsICdTdGFjazEnKTtcbiAgICBjb25zdCBzdGFnZSA9IG5ldyBTdGFnZShhcHAsICdTdGFnZScpO1xuICAgIGNvbnN0IHN0YWNrMiA9IG5ldyBCb2d1c1N0YWNrKHN0YWdlLCAnU3RhY2syJyk7XG5cbiAgICAvLyBUSEVOXG4gICAgY29uc3Qgc3RhZ2VBc20gPSBzdGFnZS5zeW50aCgpO1xuICAgIGV4cGVjdChzdGFnZUFzbS5zdGFja3MubWFwKHMgPT4gcy5zdGFja05hbWUpKS50b0VxdWFsKFtzdGFjazIuc3RhY2tOYW1lXSk7XG5cbiAgICBjb25zdCBhcHBBc20gPSBhcHAuc3ludGgoKTtcbiAgICBleHBlY3QoYXBwQXNtLnN0YWNrcy5tYXAocyA9PiBzLnN0YWNrTmFtZSkpLnRvRXF1YWwoW3N0YWNrMS5zdGFja05hbWVdKTtcbiAgfSk7XG5cbiAgdGVzdCgnQ2FuIG5lc3QgU3RhZ2VzIGluc2lkZSBvdGhlciBTdGFnZXMnLCAoKSA9PiB7XG4gICAgLy8gV0hFTlxuICAgIGNvbnN0IGFwcCA9IG5ldyBBcHAoKTtcbiAgICBjb25zdCBvdXRlciA9IG5ldyBTdGFnZShhcHAsICdPdXRlcicpO1xuICAgIGNvbnN0IGlubmVyID0gbmV3IFN0YWdlKG91dGVyLCAnSW5uZXInKTtcbiAgICBjb25zdCBzdGFjayA9IG5ldyBCb2d1c1N0YWNrKGlubmVyLCAnU3RhY2snKTtcblxuICAgIC8vIFdIRU5cbiAgICBjb25zdCBhcHBBc20gPSBhcHAuc3ludGgoKTtcbiAgICBjb25zdCBvdXRlckFzbSA9IGFwcEFzbS5nZXROZXN0ZWRBc3NlbWJseShvdXRlci5hcnRpZmFjdElkKTtcbiAgICBjb25zdCBpbm5lckFzbSA9IG91dGVyQXNtLmdldE5lc3RlZEFzc2VtYmx5KGlubmVyLmFydGlmYWN0SWQpO1xuXG4gICAgZXhwZWN0KGlubmVyQXNtLnRyeUdldEFydGlmYWN0KHN0YWNrLmFydGlmYWN0SWQpKS50b0JlRGVmaW5lZCgpO1xuICB9KTtcblxuICB0ZXN0KCdEZWZhdWx0IHN0YWNrIG5hbWUgaW4gU3RhZ2Ugb2JqZWN0cyBpbmNvcnBvcmF0ZXMgdGhlIFN0YWdlIG5hbWUgYW5kIG5vIGhhc2gnLCAoKSA9PiB7XG4gICAgLy8gV0hFTlxuICAgIGNvbnN0IGFwcCA9IG5ldyBBcHAoKTtcbiAgICBjb25zdCBzdGFnZSA9IG5ldyBTdGFnZShhcHAsICdNeVN0YWdlJyk7XG4gICAgY29uc3Qgc3RhY2sgPSBuZXcgQm9ndXNTdGFjayhzdGFnZSwgJ015U3RhY2snKTtcblxuICAgIC8vIFRIRU5cbiAgICBleHBlY3Qoc3RhZ2Uuc3RhZ2VOYW1lKS50b0VxdWFsKCdNeVN0YWdlJyk7XG4gICAgZXhwZWN0KHN0YWNrLnN0YWNrTmFtZSkudG9FcXVhbCgnTXlTdGFnZS1NeVN0YWNrJyk7XG4gIH0pO1xuXG4gIHRlc3QoJ2NhbiBvdmVycmlkZSB0aGUgc3RhZ2UgbmFtZScsICgpID0+IHtcbiAgICAvLyBXSEVOXG4gICAgY29uc3QgYXBwID0gbmV3IEFwcCgpO1xuICAgIGNvbnN0IHN0YWdlID0gbmV3IFN0YWdlKGFwcCwgJ05vdE15U3RhZ2VOYW1lJywgeyBzdGFnZU5hbWU6ICdNeVN0YWdlJyB9KTtcbiAgICBjb25zdCBzdGFjayA9IG5ldyBCb2d1c1N0YWNrKHN0YWdlLCAnTXlTdGFjaycpO1xuXG4gICAgLy8gVEhFTlxuICAgIGV4cGVjdChzdGFnZS5zdGFnZU5hbWUpLnRvRXF1YWwoJ015U3RhZ2UnKTtcbiAgICBleHBlY3Qoc3RhY2suc3RhY2tOYW1lKS50b0VxdWFsKCdNeVN0YWdlLU15U3RhY2snKTtcbiAgfSk7XG5cbiAgdGVzdCgnQ2FuIG5vdCBoYXZlIGRlcGVuZGVuY2llcyB0byBzdGFja3Mgb3V0c2lkZSB0aGUgbmVzdGVkIGFzbScsICgpID0+IHtcbiAgICAvLyBHSVZFTlxuICAgIGNvbnN0IGFwcCA9IG5ldyBBcHAoKTtcbiAgICBjb25zdCBzdGFjazEgPSBuZXcgQm9ndXNTdGFjayhhcHAsICdTdGFjazEnKTtcbiAgICBjb25zdCBzdGFnZSA9IG5ldyBTdGFnZShhcHAsICdNeVN0YWdlJyk7XG4gICAgY29uc3Qgc3RhY2syID0gbmV3IEJvZ3VzU3RhY2soc3RhZ2UsICdTdGFjazInKTtcblxuICAgIC8vIFdIRU5cbiAgICBleHBlY3QoKCkgPT4ge1xuICAgICAgc3RhY2syLmFkZERlcGVuZGVuY3koc3RhY2sxKTtcbiAgICB9KS50b1Rocm93KC9kZXBlbmRlbmN5IGNhbm5vdCBjcm9zcyBzdGFnZSBib3VuZGFyaWVzLyk7XG4gIH0pO1xuXG4gIHRlc3QoJ1doZW4gd2Ugc3ludGgoKSBhIHN0YWdlLCBhc3BlY3RzIGluc2lkZSBpdCBtdXN0IGhhdmUgYmVlbiBhcHBsaWVkJywgKCkgPT4ge1xuICAgIC8vIEdJVkVOXG4gICAgY29uc3QgYXBwID0gbmV3IEFwcCgpO1xuICAgIGNvbnN0IHN0YWdlID0gbmV3IFN0YWdlKGFwcCwgJ015U3RhZ2UnKTtcbiAgICBjb25zdCBzdGFjayA9IG5ldyBCb2d1c1N0YWNrKHN0YWdlLCAnU3RhY2snKTtcblxuICAgIC8vIFdIRU5cbiAgICBjb25zdCBhc3BlY3QgPSBuZXcgVG91Y2hpbmdBc3BlY3QoKTtcbiAgICBBc3BlY3RzLm9mKHN0YWNrKS5hZGQoYXNwZWN0KTtcblxuICAgIC8vIFRIRU5cbiAgICBhcHAuc3ludGgoKTtcbiAgICBleHBlY3QoYXNwZWN0LnZpc2l0cy5tYXAoYyA9PiBjLm5vZGUucGF0aCkpLnRvRXF1YWwoW1xuICAgICAgJ015U3RhZ2UvU3RhY2snLFxuICAgICAgJ015U3RhZ2UvU3RhY2svUmVzb3VyY2UnLFxuICAgIF0pO1xuICB9KTtcblxuICB0ZXN0KCdBc3BlY3RzIGRvIG5vdCBhcHBseSBpbnNpZGUgYSBTdGFnZScsICgpID0+IHtcbiAgICAvLyBHSVZFTlxuICAgIGNvbnN0IGFwcCA9IG5ldyBBcHAoKTtcbiAgICBjb25zdCBzdGFnZSA9IG5ldyBTdGFnZShhcHAsICdNeVN0YWdlJyk7XG4gICAgbmV3IEJvZ3VzU3RhY2soc3RhZ2UsICdTdGFjaycpO1xuXG4gICAgLy8gV0hFTlxuICAgIGNvbnN0IGFzcGVjdCA9IG5ldyBUb3VjaGluZ0FzcGVjdCgpO1xuICAgIEFzcGVjdHMub2YoYXBwKS5hZGQoYXNwZWN0KTtcblxuICAgIC8vIFRIRU5cbiAgICBhcHAuc3ludGgoKTtcbiAgICBleHBlY3QoYXNwZWN0LnZpc2l0cy5tYXAoYyA9PiBjLm5vZGUucGF0aCkpLnRvRXF1YWwoW1xuICAgICAgJycsXG4gICAgICAnVHJlZScsXG4gICAgXSk7XG4gIH0pO1xuXG4gIHRlc3QoJ0F1dG9tYXRpYyBkZXBlbmRlbmNpZXMgaW5zaWRlIGEgc3RhZ2UgYXJlIGF2YWlsYWJsZSBpbW1lZGlhdGVseSBhZnRlciBzeW50aCcsICgpID0+IHtcbiAgICAvLyBHSVZFTlxuICAgIGNvbnN0IGFwcCA9IG5ldyBBcHAoeyBjb250ZXh0OiB7IFtjeGFwaS5ORVdfU1RZTEVfU1RBQ0tfU1lOVEhFU0lTX0NPTlRFWFRdOiBmYWxzZSB9IH0pO1xuICAgIGNvbnN0IHN0YWdlID0gbmV3IFN0YWdlKGFwcCwgJ015U3RhZ2UnKTtcbiAgICBjb25zdCBzdGFjazEgPSBuZXcgU3RhY2soc3RhZ2UsICdTdGFjazEnKTtcbiAgICBjb25zdCBzdGFjazIgPSBuZXcgU3RhY2soc3RhZ2UsICdTdGFjazInKTtcblxuICAgIC8vIFdIRU5cbiAgICBjb25zdCByZXNvdXJjZTEgPSBuZXcgQ2ZuUmVzb3VyY2Uoc3RhY2sxLCAnUmVzb3VyY2UnLCB7XG4gICAgICB0eXBlOiAnQ0RLOjpUZXN0OjpSZXNvdXJjZScsXG4gICAgfSk7XG4gICAgbmV3IENmblJlc291cmNlKHN0YWNrMiwgJ1Jlc291cmNlJywge1xuICAgICAgdHlwZTogJ0NESzo6VGVzdDo6UmVzb3VyY2UnLFxuICAgICAgcHJvcGVydGllczoge1xuICAgICAgICBPdGhlclRoaW5nOiByZXNvdXJjZTEucmVmLFxuICAgICAgfSxcbiAgICB9KTtcblxuICAgIGNvbnN0IGFzbSA9IHN0YWdlLnN5bnRoKCk7XG5cbiAgICAvLyBUSEVOXG4gICAgZXhwZWN0KFxuICAgICAgYXNtLmdldFN0YWNrQXJ0aWZhY3Qoc3RhY2syLmFydGlmYWN0SWQpLmRlcGVuZGVuY2llcy5tYXAoZCA9PiBkLmlkKSkudG9FcXVhbChcbiAgICAgIFtzdGFjazEuYXJ0aWZhY3RJZF0pO1xuICB9KTtcblxuICB0ZXN0KCdBc3NlbWJsaWVzIGNhbiBiZSBkZWVwbHkgbmVzdGVkJywgKCkgPT4ge1xuICAgIC8vIEdJVkVOXG4gICAgY29uc3QgYXBwID0gbmV3IEFwcCh7IHRyZWVNZXRhZGF0YTogZmFsc2UgfSk7XG5cbiAgICBjb25zdCBsZXZlbDEgPSBuZXcgU3RhZ2UoYXBwLCAnU3RhZ2VMZXZlbDEnKTtcbiAgICBjb25zdCBsZXZlbDIgPSBuZXcgU3RhZ2UobGV2ZWwxLCAnU3RhZ2VMZXZlbDInKTtcbiAgICBuZXcgU3RhZ2UobGV2ZWwyLCAnU3RhZ2VMZXZlbDMnKTtcblxuICAgIC8vIFdIRU5cbiAgICBjb25zdCByb290QXNzZW1ibHkgPSBhcHAuc3ludGgoKTtcblxuICAgIC8vIFRIRU5cbiAgICBleHBlY3Qocm9vdEFzc2VtYmx5Lm1hbmlmZXN0LmFydGlmYWN0cykudG9FcXVhbCh7XG4gICAgICAnYXNzZW1ibHktU3RhZ2VMZXZlbDEnOiB7XG4gICAgICAgIHR5cGU6ICdjZGs6Y2xvdWQtYXNzZW1ibHknLFxuICAgICAgICBwcm9wZXJ0aWVzOiB7XG4gICAgICAgICAgZGlyZWN0b3J5TmFtZTogJ2Fzc2VtYmx5LVN0YWdlTGV2ZWwxJyxcbiAgICAgICAgICBkaXNwbGF5TmFtZTogJ1N0YWdlTGV2ZWwxJyxcbiAgICAgICAgfSxcbiAgICAgIH0sXG4gICAgfSk7XG5cbiAgICBjb25zdCBhc3NlbWJseUxldmVsMSA9IHJvb3RBc3NlbWJseS5nZXROZXN0ZWRBc3NlbWJseSgnYXNzZW1ibHktU3RhZ2VMZXZlbDEnKTtcbiAgICBleHBlY3QoYXNzZW1ibHlMZXZlbDEubWFuaWZlc3QuYXJ0aWZhY3RzKS50b0VxdWFsKHtcbiAgICAgICdhc3NlbWJseS1TdGFnZUxldmVsMS1TdGFnZUxldmVsMic6IHtcbiAgICAgICAgdHlwZTogJ2NkazpjbG91ZC1hc3NlbWJseScsXG4gICAgICAgIHByb3BlcnRpZXM6IHtcbiAgICAgICAgICBkaXJlY3RvcnlOYW1lOiAnYXNzZW1ibHktU3RhZ2VMZXZlbDEtU3RhZ2VMZXZlbDInLFxuICAgICAgICAgIGRpc3BsYXlOYW1lOiAnU3RhZ2VMZXZlbDEvU3RhZ2VMZXZlbDInLFxuICAgICAgICB9LFxuICAgICAgfSxcbiAgICB9KTtcblxuICAgIGNvbnN0IGFzc2VtYmx5TGV2ZWwyID0gYXNzZW1ibHlMZXZlbDEuZ2V0TmVzdGVkQXNzZW1ibHkoJ2Fzc2VtYmx5LVN0YWdlTGV2ZWwxLVN0YWdlTGV2ZWwyJyk7XG4gICAgZXhwZWN0KGFzc2VtYmx5TGV2ZWwyLm1hbmlmZXN0LmFydGlmYWN0cykudG9FcXVhbCh7XG4gICAgICAnYXNzZW1ibHktU3RhZ2VMZXZlbDEtU3RhZ2VMZXZlbDItU3RhZ2VMZXZlbDMnOiB7XG4gICAgICAgIHR5cGU6ICdjZGs6Y2xvdWQtYXNzZW1ibHknLFxuICAgICAgICBwcm9wZXJ0aWVzOiB7XG4gICAgICAgICAgZGlyZWN0b3J5TmFtZTogJ2Fzc2VtYmx5LVN0YWdlTGV2ZWwxLVN0YWdlTGV2ZWwyLVN0YWdlTGV2ZWwzJyxcbiAgICAgICAgICBkaXNwbGF5TmFtZTogJ1N0YWdlTGV2ZWwxL1N0YWdlTGV2ZWwyL1N0YWdlTGV2ZWwzJyxcbiAgICAgICAgfSxcbiAgICAgIH0sXG4gICAgfSk7XG4gIH0pO1xuXG4gIHRlc3QoJ3N0YWdlIG5hbWUgdmFsaWRhdGlvbicsICgpID0+IHtcbiAgICBjb25zdCBhcHAgPSBuZXcgQXBwKCk7XG5cbiAgICBuZXcgU3RhZ2UoYXBwLCAnYWJjZCcpO1xuICAgIG5ldyBTdGFnZShhcHAsICdhYmNkMTIzJyk7XG4gICAgbmV3IFN0YWdlKGFwcCwgJ2FiY2QxMjMtNTg4ZGZqamsnKTtcbiAgICBuZXcgU3RhZ2UoYXBwLCAnYWJjZDEyMy01ODhkZmpqay5zc3MnKTtcbiAgICBuZXcgU3RhZ2UoYXBwLCAnYWJjZDEyMy01ODhkZmpqay5zc3NfYWpzaWQnKTtcblxuICAgIGV4cGVjdCgoKSA9PiBuZXcgU3RhZ2UoYXBwLCAnYWJjZDEyMy01ODhkZmpqay5zc3NfYWpzaWQgJykpLnRvVGhyb3coL2ludmFsaWQgc3RhZ2UgbmFtZSBcImFiY2QxMjMtNTg4ZGZqamsuc3NzX2Fqc2lkIFwiLyk7XG4gICAgZXhwZWN0KCgpID0+IG5ldyBTdGFnZShhcHAsICdhYmNkMTIzLTU4OGRmamprLnNzc19hanNpZC9kZm8nKSkudG9UaHJvdygvaW52YWxpZCBzdGFnZSBuYW1lIFwiYWJjZDEyMy01ODhkZmpqay5zc3NfYWpzaWRcXC9kZm9cIi8pO1xuICAgIGV4cGVjdCgoKSA9PiBuZXcgU3RhZ2UoYXBwLCAnJicpKS50b1Rocm93KC9pbnZhbGlkIHN0YWdlIG5hbWUgXCImXCIvKTtcbiAgICBleHBlY3QoKCkgPT4gbmV3IFN0YWdlKGFwcCwgJzQ1aGVsbG8nKSkudG9UaHJvdygvaW52YWxpZCBzdGFnZSBuYW1lIFwiNDVoZWxsb1wiLyk7XG4gICAgZXhwZWN0KCgpID0+IG5ldyBTdGFnZShhcHAsICdmJykpLnRvVGhyb3coL2ludmFsaWQgc3RhZ2UgbmFtZSBcImZcIi8pO1xuICB9KTtcblxuICB0ZXN0KCdvdXRkaXIgY2Fubm90IGJlIHNwZWNpZmllZCBmb3IgbmVzdGVkIHN0YWdlcycsICgpID0+IHtcbiAgICAvLyBXSEVOXG4gICAgY29uc3QgYXBwID0gbmV3IEFwcCgpO1xuXG4gICAgLy8gVEhFTlxuICAgIGV4cGVjdCgoKSA9PiBuZXcgU3RhZ2UoYXBwLCAnbXlzdGFnZScsIHsgb3V0ZGlyOiAnL3RtcC9mb28vYmFyJyB9KSkudG9UaHJvdygvXCJvdXRkaXJcIiBjYW5ub3QgYmUgc3BlY2lmaWVkIGZvciBuZXN0ZWQgc3RhZ2VzLyk7XG4gIH0pO1xuXG4gIHRlc3QoJ1N0YWdlLmlzU3RhZ2UgaW5kaWNhdGVzIHRoYXQgYSBjb25zdHJ1Y3QgaXMgYSBzdGFnZScsICgpID0+IHtcbiAgICAvLyBXSEVOXG4gICAgY29uc3QgYXBwID0gbmV3IEFwcCgpO1xuICAgIGNvbnN0IHN0YWNrID0gbmV3IFN0YWNrKCk7XG4gICAgY29uc3Qgc3RhZ2UgPSBuZXcgU3RhZ2UoYXBwLCAnU3RhZ2UnKTtcblxuICAgIC8vIFRIRU5cbiAgICBleHBlY3QoU3RhZ2UuaXNTdGFnZShzdGFnZSkpLnRvRXF1YWwodHJ1ZSk7XG4gICAgZXhwZWN0KFN0YWdlLmlzU3RhZ2UoYXBwKSkudG9FcXVhbCh0cnVlKTtcbiAgICBleHBlY3QoU3RhZ2UuaXNTdGFnZShzdGFjaykpLnRvRXF1YWwoZmFsc2UpO1xuICB9KTtcblxuICB0ZXN0KCdTdGFnZS5pc1N0YWdlIGluZGljYXRlcyB0aGF0IGEgY29uc3RydWN0IGlzIGEgc3RhZ2UgYmFzZWQgb24gc3ltYm9sJywgKCkgPT4ge1xuICAgIC8vIFdIRU5cbiAgICBjb25zdCBhcHAgPSBuZXcgQXBwKCk7XG4gICAgY29uc3Qgc3RhZ2UgPSBuZXcgU3RhZ2UoYXBwLCAnU3RhZ2UnKTtcblxuICAgIGNvbnN0IGV4dGVybmFsU3RhZ2UgPSB7fTtcbiAgICBjb25zdCBTVEFHRV9TWU1CT0wgPSBTeW1ib2wuZm9yKCdAYXdzLWNkay9jb3JlLlN0YWdlJyk7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4dGVybmFsU3RhZ2UsIFNUQUdFX1NZTUJPTCwgeyB2YWx1ZTogdHJ1ZSB9KTtcblxuICAgIC8vIFRIRU5cbiAgICBleHBlY3QoU3RhZ2UuaXNTdGFnZShzdGFnZSkpLnRvRXF1YWwodHJ1ZSk7XG4gICAgZXhwZWN0KFN0YWdlLmlzU3RhZ2UoYXBwKSkudG9FcXVhbCh0cnVlKTtcbiAgICBleHBlY3QoU3RhZ2UuaXNTdGFnZShleHRlcm5hbFN0YWdlKSkudG9FcXVhbCh0cnVlKTtcbiAgfSk7XG59KTtcblxudGVzdCgnbWlzc2luZyBjb250ZXh0IGluIFN0YWdlcyBpcyBwcm9wYWdhdGVkIHVwIHRvIHJvb3QgYXNzZW1ibHknLCAoKSA9PiB7XG4gIC8vIEdJVkVOXG4gIGNvbnN0IGFwcCA9IG5ldyBBcHAoKTtcbiAgY29uc3Qgc3RhZ2UgPSBuZXcgU3RhZ2UoYXBwLCAnU3RhZ2UnLCB7XG4gICAgZW52OiB7IGFjY291bnQ6ICdhY2NvdW50JywgcmVnaW9uOiAncmVnaW9uJyB9LFxuICB9KTtcbiAgY29uc3Qgc3RhY2sgPSBuZXcgU3RhY2soc3RhZ2UsICdTdGFjaycpO1xuICBuZXcgQ2ZuUmVzb3VyY2Uoc3RhY2ssICdSZXNvdXJjZScsIHsgdHlwZTogJ1NvbWV0aGluZycgfSk7XG5cbiAgLy8gV0hFTlxuICBzdGFjay5yZXBvcnRNaXNzaW5nQ29udGV4dEtleSh7XG4gICAga2V5OiAnbWlzc2luZy1jb250ZXh0LWtleScsXG4gICAgcHJvdmlkZXI6IGN4c2NoZW1hLkNvbnRleHRQcm92aWRlci5BVkFJTEFCSUxJVFlfWk9ORV9QUk9WSURFUixcbiAgICBwcm9wczoge1xuICAgICAgYWNjb3VudDogJ2FjY291bnQnLFxuICAgICAgcmVnaW9uOiAncmVnaW9uJyxcbiAgICB9LFxuICB9KTtcblxuICAvLyBUSEVOXG4gIGNvbnN0IGFzc2VtYmx5ID0gYXBwLnN5bnRoKCk7XG5cbiAgZXhwZWN0KGFzc2VtYmx5Lm1hbmlmZXN0Lm1pc3NpbmcpLnRvRXF1YWwoW1xuICAgIHtcbiAgICAgIGtleTogJ21pc3NpbmctY29udGV4dC1rZXknLFxuICAgICAgcHJvdmlkZXI6IGN4c2NoZW1hLkNvbnRleHRQcm92aWRlci5BVkFJTEFCSUxJVFlfWk9ORV9QUk9WSURFUixcbiAgICAgIHByb3BzOiB7XG4gICAgICAgIGFjY291bnQ6ICdhY2NvdW50JyxcbiAgICAgICAgbG9va3VwUm9sZUFybjogJ2Fybjoke0FXUzo6UGFydGl0aW9ufTppYW06OmFjY291bnQ6cm9sZS9jZGstaG5iNjU5ZmRzLWxvb2t1cC1yb2xlLWFjY291bnQtcmVnaW9uJyxcbiAgICAgICAgcmVnaW9uOiAncmVnaW9uJyxcbiAgICAgIH0sXG4gICAgfSxcbiAgXSk7XG59KTtcblxuY2xhc3MgVG91Y2hpbmdBc3BlY3QgaW1wbGVtZW50cyBJQXNwZWN0IHtcbiAgcHVibGljIHJlYWRvbmx5IHZpc2l0cyA9IG5ldyBBcnJheTxJQ29uc3RydWN0PigpO1xuICBwdWJsaWMgdmlzaXQobm9kZTogSUNvbnN0cnVjdCk6IHZvaWQge1xuICAgIHRoaXMudmlzaXRzLnB1c2gobm9kZSk7XG4gIH1cbn1cblxuY2xhc3MgQm9ndXNTdGFjayBleHRlbmRzIFN0YWNrIHtcbiAgY29uc3RydWN0b3Ioc2NvcGU6IENvbnN0cnVjdCwgaWQ6IHN0cmluZykge1xuICAgIHN1cGVyKHNjb3BlLCBpZCk7XG5cbiAgICBuZXcgQ2ZuUmVzb3VyY2UodGhpcywgJ1Jlc291cmNlJywge1xuICAgICAgdHlwZTogJ0NESzo6VGVzdDo6UmVzb3VyY2UnLFxuICAgIH0pO1xuICB9XG59XG5cbmZ1bmN0aW9uIGFjY3RSZWdpb24oczogU3RhY2spIHtcbiAgcmV0dXJuIFtzLmFjY291bnQsIHMucmVnaW9uXTtcbn1cbiJdfQ==