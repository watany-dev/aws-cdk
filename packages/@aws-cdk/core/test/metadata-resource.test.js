"use strict";
var _a, _b;
Object.defineProperty(exports, "__esModule", { value: true });
const zlib = require("zlib");
const constructs_1 = require("constructs");
const lib_1 = require("../lib");
const metadata_resource_1 = require("../lib/private/metadata-resource");
describe('MetadataResource', () => {
    let app;
    let stack;
    beforeEach(() => {
        jest.spyOn(console, 'log').mockImplementation(() => { return true; });
        jest.spyOn(console, 'error').mockImplementation(() => { return true; });
        app = new lib_1.App({
            analyticsReporting: true,
        });
        stack = new lib_1.Stack(app, 'Stack');
    });
    afterEach(() => {
        jest.resetAllMocks();
    });
    test('is not included if the region is known and metadata is not available', () => {
        new lib_1.Stack(app, 'StackUnavailable', {
            env: { region: 'definitely-no-metadata-resource-available-here' },
        });
        const stackTemplate = app.synth().getStackByName('StackUnavailable').template;
        expect(stackTemplate.Resources?.CDKMetadata).toBeUndefined();
    });
    test('is included if the region is known and metadata is available', () => {
        new lib_1.Stack(app, 'StackPresent', {
            env: { region: 'us-east-1' },
        });
        const stackTemplate = app.synth().getStackByName('StackPresent').template;
        expect(stackTemplate.Resources?.CDKMetadata).toBeDefined();
    });
    test('is included if the region is unknown with conditions', () => {
        new lib_1.Stack(app, 'StackUnknown');
        const stackTemplate = app.synth().getStackByName('StackUnknown').template;
        expect(stackTemplate.Resources?.CDKMetadata).toBeDefined();
        expect(stackTemplate.Resources?.CDKMetadata?.Condition).toBeDefined();
    });
    test('includes the formatted Analytics property', () => {
        // A very simple check that the jsii runtime psuedo-construct is present.
        // This check works whether we're running locally or on CodeBuild, on v1 or v2.
        // Other tests(in app.test.ts) will test version-specific results.
        expect(stackAnalytics()).toMatch(/jsii-runtime.Runtime/);
    });
    test('includes the current jsii runtime version', () => {
        process.env.JSII_AGENT = 'Java/1.2.3.4';
        expect(stackAnalytics()).toContain('Java/1.2.3.4!jsii-runtime.Runtime');
        delete process.env.JSII_AGENT;
    });
    test('includes constructs added to the stack', () => {
        new TestConstruct(stack, 'Test');
        expect(stackAnalytics()).toContain('FakeVersion.2.3!@amzn/core.TestConstruct');
    });
    test('only includes constructs in the allow list', () => {
        new TestThirdPartyConstruct(stack, 'Test');
        expect(stackAnalytics()).not.toContain('TestConstruct');
    });
    test('validation plugins included', () => {
        const newApp = new lib_1.App({
            analyticsReporting: true,
            policyValidationBeta1: [
                new ValidationPlugin('plugin1'),
            ],
        });
        const stage1 = new lib_1.Stage(newApp, 'Stage1', {
            policyValidationBeta1: [
                new ValidationPlugin('plugin11'),
            ],
        });
        const stack1 = new lib_1.Stack(stage1, 'Stack1', { stackName: 'stack1' });
        const stage2 = new lib_1.Stage(newApp, 'Stage2', {
            policyValidationBeta1: [
                new ValidationPlugin('plugin12'),
            ],
        });
        const stack2 = new lib_1.Stack(stage2, 'Stack2', { stackName: 'stack1' });
        expect(stackAnalytics(stage1, stack1.stackName)).toMatch(/policyValidation.{plugin11,plugin1}/);
        expect(stackAnalytics(stage2, stack2.stackName)).toMatch(/policyValidation.{plugin12,plugin1}/);
    });
    function stackAnalytics(stage = app, stackName = 'Stack') {
        let stackArtifact;
        if (lib_1.App.isApp(stage)) {
            stackArtifact = stage.synth().getStackByName(stackName);
        }
        else {
            const a = lib_1.App.of(stage);
            stackArtifact = a.synth().getNestedAssembly(stage.artifactId).getStackByName(stackName);
        }
        let encodedAnalytics = stackArtifact.template.Resources?.CDKMetadata?.Properties?.Analytics;
        ;
        return plaintextConstructsFromAnalytics(encodedAnalytics);
    }
});
describe('formatAnalytics', () => {
    test('analytics are formatted with a prefix of v2:deflate64:', () => {
        const constructInfo = [{ fqn: 'aws-cdk-lib.Construct', version: '1.2.3' }];
        expect((0, metadata_resource_1.formatAnalytics)(constructInfo)).toMatch(/v2:deflate64:.*/);
    });
    test('single construct', () => {
        const constructInfo = [{ fqn: 'aws-cdk-lib.Construct', version: '1.2.3' }];
        expectAnalytics(constructInfo, '1.2.3!aws-cdk-lib.Construct');
    });
    test('common prefixes with same versions are combined', () => {
        const constructInfo = [
            { fqn: 'aws-cdk-lib.Construct', version: '1.2.3' },
            { fqn: 'aws-cdk-lib.CfnResource', version: '1.2.3' },
            { fqn: 'aws-cdk-lib.Stack', version: '1.2.3' },
        ];
        expectAnalytics(constructInfo, '1.2.3!aws-cdk-lib.{Construct,CfnResource,Stack}');
    });
    test('nested modules with common prefixes and same versions are combined', () => {
        const constructInfo = [
            { fqn: 'aws-cdk-lib.Construct', version: '1.2.3' },
            { fqn: 'aws-cdk-lib.CfnResource', version: '1.2.3' },
            { fqn: 'aws-cdk-lib.Stack', version: '1.2.3' },
            { fqn: 'aws-cdk-lib.aws_servicefoo.CoolResource', version: '1.2.3' },
            { fqn: 'aws-cdk-lib.aws_servicefoo.OtherResource', version: '1.2.3' },
        ];
        expectAnalytics(constructInfo, '1.2.3!aws-cdk-lib.{Construct,CfnResource,Stack,aws_servicefoo.{CoolResource,OtherResource}}');
    });
    test('constructs are grouped by version', () => {
        const constructInfo = [
            { fqn: 'aws-cdk-lib.Construct', version: '1.2.3' },
            { fqn: 'aws-cdk-lib.CfnResource', version: '1.2.3' },
            { fqn: 'aws-cdk-lib.Stack', version: '1.2.3' },
            { fqn: 'aws-cdk-lib.CoolResource', version: '0.1.2' },
            { fqn: 'aws-cdk-lib.OtherResource', version: '0.1.2' },
        ];
        expectAnalytics(constructInfo, '1.2.3!aws-cdk-lib.{Construct,CfnResource,Stack},0.1.2!aws-cdk-lib.{CoolResource,OtherResource}');
    });
    test('ensure gzip is encoded with "unknown" operating system to maintain consistent output across systems', () => {
        const constructInfo = [{ fqn: 'aws-cdk-lib.Construct', version: '1.2.3' }];
        const analytics = (0, metadata_resource_1.formatAnalytics)(constructInfo);
        const gzip = Buffer.from(analytics.split(':')[2], 'base64');
        expect(gzip[9]).toBe(255);
    });
    // Compares the output of formatAnalytics with an expected (plaintext) output.
    // For ease of testing, the plaintext versions are compared rather than the encoded versions.
    function expectAnalytics(constructs, expectedPlaintext) {
        expect(plaintextConstructsFromAnalytics((0, metadata_resource_1.formatAnalytics)(constructs))).toEqual(expectedPlaintext);
    }
});
function plaintextConstructsFromAnalytics(analytics) {
    return zlib.gunzipSync(Buffer.from(analytics.split(':')[2], 'base64')).toString('utf-8');
}
const JSII_RUNTIME_SYMBOL = Symbol.for('jsii.rtti');
class TestConstruct extends constructs_1.Construct {
}
_a = JSII_RUNTIME_SYMBOL;
// @ts-ignore
TestConstruct[_a] = { fqn: '@amzn/core.TestConstruct', version: 'FakeVersion.2.3' };
class TestThirdPartyConstruct extends constructs_1.Construct {
}
_b = JSII_RUNTIME_SYMBOL;
// @ts-ignore
TestThirdPartyConstruct[_b] = { fqn: 'mycoolthing.TestConstruct', version: '1.2.3' };
class ValidationPlugin {
    constructor(name) {
        this.name = name;
    }
    validate(_context) {
        return {
            success: true,
            violations: [],
        };
    }
}
//# sourceMappingURL=data:application/json;base64,