"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.attachCustomSynthesis = exports.App = void 0;
const cxapi = require("@aws-cdk/cx-api");
const fs = require("fs-extra");
const private_context_1 = require("./private/private-context");
const synthesis_1 = require("./private/synthesis");
const stage_1 = require("./stage");
const APP_SYMBOL = Symbol.for('@aws-cdk/core.App');
/**
 * A construct which represents an entire CDK app. This construct is normally
 * the root of the construct tree.
 *
 * You would normally define an `App` instance in your program's entrypoint,
 * then define constructs where the app is used as the parent scope.
 *
 * After all the child constructs are defined within the app, you should call
 * `app.synth()` which will emit a "cloud assembly" from this app into the
 * directory specified by `outdir`. Cloud assemblies includes artifacts such as
 * CloudFormation templates and assets that are needed to deploy this app into
 * the AWS cloud.
 *
 * @see https://docs.aws.amazon.com/cdk/latest/guide/apps.html
 */
class App extends stage_1.Stage {
    /**
     * Checks if an object is an instance of the `App` class.
     * @returns `true` if `obj` is an `App`.
     * @param obj The object to evaluate
     */
    static isApp(obj) {
        return APP_SYMBOL in obj;
    }
    /**
     * Initializes a CDK application.
     * @param props initialization properties
     */
    constructor(props = {}) {
        super(undefined, '', {
            outdir: props.outdir ?? process.env[cxapi.OUTDIR_ENV],
            policyValidationBeta1: props.policyValidationBeta1,
        });
        Object.defineProperty(this, APP_SYMBOL, { value: true });
        this.loadContext(props.context, props.postCliContext);
        if (props.stackTraces === false) {
            this.node.setContext(cxapi.DISABLE_METADATA_STACK_TRACE, true);
        }
        if (props.defaultStackSynthesizer) {
            this.node.setContext(private_context_1.PRIVATE_CONTEXT_DEFAULT_STACK_SYNTHESIZER, props.defaultStackSynthesizer);
        }
        const analyticsReporting = props.analyticsReporting ?? props.runtimeInfo;
        if (analyticsReporting !== undefined) {
            this.node.setContext(cxapi.ANALYTICS_REPORTING_ENABLED_CONTEXT, analyticsReporting);
        }
        const autoSynth = props.autoSynth ?? cxapi.OUTDIR_ENV in process.env;
        if (autoSynth) {
            // synth() guarantees it will only execute once, so a default of 'true'
            // doesn't bite manual calling of the function.
            process.once('beforeExit', () => this.synth());
        }
        this._treeMetadata = props.treeMetadata ?? true;
    }
    loadContext(defaults = {}, final = {}) {
        // prime with defaults passed through constructor
        for (const [k, v] of Object.entries(defaults)) {
            this.node.setContext(k, v);
        }
        // reconstructing the context from the two possible sources:
        const context = {
            ...this.readContextFromEnvironment(),
            ...this.readContextFromTempFile(),
        };
        for (const [k, v] of Object.entries(context)) {
            this.node.setContext(k, v);
        }
        // finalContext passed through constructor overwrites
        for (const [k, v] of Object.entries(final)) {
            this.node.setContext(k, v);
        }
    }
    readContextFromTempFile() {
        const location = process.env[cxapi.CONTEXT_OVERFLOW_LOCATION_ENV];
        return location ? fs.readJSONSync(location) : {};
    }
    readContextFromEnvironment() {
        const contextJson = process.env[cxapi.CONTEXT_ENV];
        return contextJson ? JSON.parse(contextJson) : {};
    }
}
exports.App = App;
/**
 * Add a custom synthesis for the given construct
 *
 * When the construct is being synthesized, this allows it to add additional items
 * into the Cloud Assembly output.
 *
 * This feature is intended for use by official AWS CDK libraries only; 3rd party
 * library authors and CDK users should not use this function. That's why it's not
 * exposed via jsii.
 */
function attachCustomSynthesis(construct, synthesis) {
    // synthesis.ts where the implementation lives is not exported. So
    // this function is just a re-export of that function.
    (0, synthesis_1.addCustomSynthesis)(construct, synthesis);
}
exports.attachCustomSynthesis = attachCustomSynthesis;
//# sourceMappingURL=data:application/json;base64,