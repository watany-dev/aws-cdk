"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.PolicyValidationReportFormatter = void 0;
const os = require("os");
const path = require("path");
const table_1 = require("table");
const trace_1 = require("./trace");
const report = require("../report");
/**
 * The report emitted by the plugin after evaluation.
 */
class PolicyValidationReportFormatter {
    constructor(tree) {
        this.tree = tree;
        this.reportTrace = new trace_1.ReportTrace(tree);
    }
    formatPrettyPrinted(reps) {
        const json = this.formatJson(reps);
        const output = [json.title];
        output.push('-'.repeat(json.title.length));
        json.pluginReports.forEach(plugin => {
            output.push('');
            output.push((0, table_1.table)([
                [`Plugin: ${plugin.summary.pluginName}`],
                [`Version: ${plugin.version ?? 'N/A'}`],
                [`Status: ${plugin.summary.status}`],
            ], {
                header: { content: 'Plugin Report' },
                singleLine: true,
                columns: [{
                        paddingLeft: 3,
                        paddingRight: 3,
                    }],
            }));
            if (plugin.summary.metadata) {
                output.push('');
                output.push(`Metadata: \n\t${Object.entries(plugin.summary.metadata).flatMap(([key, value]) => `${key}: ${value}`).join('\n\t')}`);
            }
            if (plugin.violations.length > 0) {
                output.push('');
                output.push('(Violations)');
            }
            plugin.violations.forEach((violation) => {
                const constructs = violation.violatingConstructs;
                const occurrences = constructs.length;
                const title = reset(red(bright(`${violation.ruleName} (${occurrences} occurrences)`)));
                output.push('');
                output.push(title);
                if (violation.severity) {
                    output.push(`Severity: ${violation.severity}`);
                }
                output.push('');
                output.push('  Occurrences:');
                for (const construct of constructs) {
                    output.push('');
                    output.push(`    - Construct Path: ${construct.constructPath ?? 'N/A'}`);
                    output.push(`    - Template Path: ${construct.templatePath}`);
                    output.push(`    - Creation Stack:\n\t${this.reportTrace.formatPrettyPrinted(construct.constructPath)}`);
                    output.push(`    - Resource ID: ${construct.resourceLogicalId}`);
                    if (construct.locations) {
                        output.push('    - Template Locations:');
                        for (const location of construct.locations) {
                            output.push(`      > ${location}`);
                        }
                    }
                }
                output.push('');
                output.push(`  Description: ${violation.description}`);
                if (violation.fix) {
                    output.push(`  How to fix: ${violation.fix}`);
                }
                if (violation.ruleMetadata) {
                    output.push(`  Rule Metadata: \n\t${Object.entries(violation.ruleMetadata).flatMap(([key, value]) => `${key}: ${value}`).join('\n\t')}`);
                }
            });
        });
        output.push('');
        output.push('Policy Validation Report Summary');
        output.push('');
        output.push((0, table_1.table)([
            ['Plugin', 'Status'],
            ...reps.map(rep => [rep.pluginName, rep.success ? 'success' : 'failure']),
        ], {}));
        return output.join(os.EOL);
    }
    formatJson(reps) {
        return {
            title: 'Validation Report',
            pluginReports: reps
                .filter(rep => !rep.success)
                .map(rep => ({
                version: rep.pluginVersion,
                summary: {
                    pluginName: rep.pluginName,
                    status: rep.success ? report.PolicyValidationReportStatusBeta1.SUCCESS : report.PolicyValidationReportStatusBeta1.FAILURE,
                    metadata: rep.metadata,
                },
                violations: rep.violations.map(violation => ({
                    ruleName: violation.ruleName,
                    description: violation.description,
                    fix: violation.fix,
                    ruleMetadata: violation.ruleMetadata,
                    severity: violation.severity,
                    violatingResources: violation.violatingResources,
                    violatingConstructs: violation.violatingResources.map(resource => {
                        const constructPath = this.tree.getConstructByLogicalId(path.basename(resource.templatePath), resource.resourceLogicalId)?.node.path;
                        return {
                            constructStack: this.reportTrace.formatJson(constructPath),
                            constructPath: constructPath,
                            locations: resource.locations,
                            resourceLogicalId: resource.resourceLogicalId,
                            templatePath: resource.templatePath,
                        };
                    }),
                })),
            })),
        };
    }
}
exports.PolicyValidationReportFormatter = PolicyValidationReportFormatter;
function reset(s) {
    return `${s}\x1b[0m`;
}
function red(s) {
    return `\x1b[31m${s}`;
}
function bright(s) {
    return `\x1b[1m${s}`;
}
//# sourceMappingURL=data:application/json;base64,