#!/usr/bin/env node
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const cdk = require("@aws-cdk/core");
const integ = require("@aws-cdk/integ-tests");
const s3 = require("../lib");
// Reproduces the issues experienced in #23588 and #23547, both resulting from
// not validating log delivery is applied correctly when the target bucket for
// server access logs is in another account.
const app = new cdk.App();
const targetBucketStack = new cdk.Stack(app, 'aws-cdk-s3-access-logs-target');
const sourceBucketStack = new cdk.Stack(app, 'aws-cdk-s3-access-logs-delivery');
const targetBucket = new s3.Bucket(targetBucketStack, 'TargetBucket', {
    autoDeleteObjects: true,
    removalPolicy: cdk.RemovalPolicy.DESTROY,
    blockPublicAccess: s3.BlockPublicAccess.BLOCK_ALL,
    enforceSSL: true,
    objectOwnership: s3.ObjectOwnership.BUCKET_OWNER_ENFORCED,
    encryption: s3.BucketEncryption.S3_MANAGED,
    accessControl: s3.BucketAccessControl.BUCKET_OWNER_FULL_CONTROL,
});
new s3.Bucket(sourceBucketStack, 'SourceBucket', {
    autoDeleteObjects: true,
    removalPolicy: cdk.RemovalPolicy.DESTROY,
    blockPublicAccess: s3.BlockPublicAccess.BLOCK_ALL,
    enforceSSL: true,
    objectOwnership: s3.ObjectOwnership.BUCKET_OWNER_ENFORCED,
    encryption: s3.BucketEncryption.S3_MANAGED,
    accessControl: s3.BucketAccessControl.BUCKET_OWNER_FULL_CONTROL,
    serverAccessLogsBucket: targetBucket,
    serverAccessLogsPrefix: 'test/',
});
new integ.IntegTest(app, 'ServerAccessLogsImportTest', {
    testCases: [sourceBucketStack],
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW50ZWcuYnVja2V0LWltcG9ydC1zZXJ2ZXItYWNjZXNzLWxvZ3MuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJpbnRlZy5idWNrZXQtaW1wb3J0LXNlcnZlci1hY2Nlc3MtbG9ncy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFDQSxxQ0FBcUM7QUFDckMsOENBQThDO0FBQzlDLDZCQUE2QjtBQUU3Qiw4RUFBOEU7QUFDOUUsOEVBQThFO0FBQzlFLDRDQUE0QztBQUM1QyxNQUFNLEdBQUcsR0FBRyxJQUFJLEdBQUcsQ0FBQyxHQUFHLEVBQUUsQ0FBQztBQUMxQixNQUFNLGlCQUFpQixHQUFHLElBQUksR0FBRyxDQUFDLEtBQUssQ0FBQyxHQUFHLEVBQUUsK0JBQStCLENBQUMsQ0FBQztBQUM5RSxNQUFNLGlCQUFpQixHQUFHLElBQUksR0FBRyxDQUFDLEtBQUssQ0FBQyxHQUFHLEVBQUUsaUNBQWlDLENBQUMsQ0FBQztBQUVoRixNQUFNLFlBQVksR0FBRyxJQUFJLEVBQUUsQ0FBQyxNQUFNLENBQUMsaUJBQWlCLEVBQUUsY0FBYyxFQUFFO0lBQ3BFLGlCQUFpQixFQUFFLElBQUk7SUFDdkIsYUFBYSxFQUFFLEdBQUcsQ0FBQyxhQUFhLENBQUMsT0FBTztJQUN4QyxpQkFBaUIsRUFBRSxFQUFFLENBQUMsaUJBQWlCLENBQUMsU0FBUztJQUNqRCxVQUFVLEVBQUUsSUFBSTtJQUNoQixlQUFlLEVBQUUsRUFBRSxDQUFDLGVBQWUsQ0FBQyxxQkFBcUI7SUFDekQsVUFBVSxFQUFFLEVBQUUsQ0FBQyxnQkFBZ0IsQ0FBQyxVQUFVO0lBQzFDLGFBQWEsRUFBRSxFQUFFLENBQUMsbUJBQW1CLENBQUMseUJBQXlCO0NBQ2hFLENBQUMsQ0FBQztBQUNILElBQUksRUFBRSxDQUFDLE1BQU0sQ0FBQyxpQkFBaUIsRUFBRSxjQUFjLEVBQUU7SUFDL0MsaUJBQWlCLEVBQUUsSUFBSTtJQUN2QixhQUFhLEVBQUUsR0FBRyxDQUFDLGFBQWEsQ0FBQyxPQUFPO0lBQ3hDLGlCQUFpQixFQUFFLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQyxTQUFTO0lBQ2pELFVBQVUsRUFBRSxJQUFJO0lBQ2hCLGVBQWUsRUFBRSxFQUFFLENBQUMsZUFBZSxDQUFDLHFCQUFxQjtJQUN6RCxVQUFVLEVBQUUsRUFBRSxDQUFDLGdCQUFnQixDQUFDLFVBQVU7SUFDMUMsYUFBYSxFQUFFLEVBQUUsQ0FBQyxtQkFBbUIsQ0FBQyx5QkFBeUI7SUFDL0Qsc0JBQXNCLEVBQUUsWUFBWTtJQUNwQyxzQkFBc0IsRUFBRSxPQUFPO0NBQ2hDLENBQUMsQ0FBQztBQUVILElBQUksS0FBSyxDQUFDLFNBQVMsQ0FBQyxHQUFHLEVBQUUsNEJBQTRCLEVBQUU7SUFDckQsU0FBUyxFQUFFLENBQUMsaUJBQWlCLENBQUM7Q0FDL0IsQ0FBQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiIyEvdXNyL2Jpbi9lbnYgbm9kZVxuaW1wb3J0ICogYXMgY2RrIGZyb20gJ0Bhd3MtY2RrL2NvcmUnO1xuaW1wb3J0ICogYXMgaW50ZWcgZnJvbSAnQGF3cy1jZGsvaW50ZWctdGVzdHMnO1xuaW1wb3J0ICogYXMgczMgZnJvbSAnLi4vbGliJztcblxuLy8gUmVwcm9kdWNlcyB0aGUgaXNzdWVzIGV4cGVyaWVuY2VkIGluICMyMzU4OCBhbmQgIzIzNTQ3LCBib3RoIHJlc3VsdGluZyBmcm9tXG4vLyBub3QgdmFsaWRhdGluZyBsb2cgZGVsaXZlcnkgaXMgYXBwbGllZCBjb3JyZWN0bHkgd2hlbiB0aGUgdGFyZ2V0IGJ1Y2tldCBmb3Jcbi8vIHNlcnZlciBhY2Nlc3MgbG9ncyBpcyBpbiBhbm90aGVyIGFjY291bnQuXG5jb25zdCBhcHAgPSBuZXcgY2RrLkFwcCgpO1xuY29uc3QgdGFyZ2V0QnVja2V0U3RhY2sgPSBuZXcgY2RrLlN0YWNrKGFwcCwgJ2F3cy1jZGstczMtYWNjZXNzLWxvZ3MtdGFyZ2V0Jyk7XG5jb25zdCBzb3VyY2VCdWNrZXRTdGFjayA9IG5ldyBjZGsuU3RhY2soYXBwLCAnYXdzLWNkay1zMy1hY2Nlc3MtbG9ncy1kZWxpdmVyeScpO1xuXG5jb25zdCB0YXJnZXRCdWNrZXQgPSBuZXcgczMuQnVja2V0KHRhcmdldEJ1Y2tldFN0YWNrLCAnVGFyZ2V0QnVja2V0Jywge1xuICBhdXRvRGVsZXRlT2JqZWN0czogdHJ1ZSxcbiAgcmVtb3ZhbFBvbGljeTogY2RrLlJlbW92YWxQb2xpY3kuREVTVFJPWSxcbiAgYmxvY2tQdWJsaWNBY2Nlc3M6IHMzLkJsb2NrUHVibGljQWNjZXNzLkJMT0NLX0FMTCxcbiAgZW5mb3JjZVNTTDogdHJ1ZSxcbiAgb2JqZWN0T3duZXJzaGlwOiBzMy5PYmplY3RPd25lcnNoaXAuQlVDS0VUX09XTkVSX0VORk9SQ0VELFxuICBlbmNyeXB0aW9uOiBzMy5CdWNrZXRFbmNyeXB0aW9uLlMzX01BTkFHRUQsXG4gIGFjY2Vzc0NvbnRyb2w6IHMzLkJ1Y2tldEFjY2Vzc0NvbnRyb2wuQlVDS0VUX09XTkVSX0ZVTExfQ09OVFJPTCxcbn0pO1xubmV3IHMzLkJ1Y2tldChzb3VyY2VCdWNrZXRTdGFjaywgJ1NvdXJjZUJ1Y2tldCcsIHtcbiAgYXV0b0RlbGV0ZU9iamVjdHM6IHRydWUsXG4gIHJlbW92YWxQb2xpY3k6IGNkay5SZW1vdmFsUG9saWN5LkRFU1RST1ksXG4gIGJsb2NrUHVibGljQWNjZXNzOiBzMy5CbG9ja1B1YmxpY0FjY2Vzcy5CTE9DS19BTEwsXG4gIGVuZm9yY2VTU0w6IHRydWUsXG4gIG9iamVjdE93bmVyc2hpcDogczMuT2JqZWN0T3duZXJzaGlwLkJVQ0tFVF9PV05FUl9FTkZPUkNFRCxcbiAgZW5jcnlwdGlvbjogczMuQnVja2V0RW5jcnlwdGlvbi5TM19NQU5BR0VELFxuICBhY2Nlc3NDb250cm9sOiBzMy5CdWNrZXRBY2Nlc3NDb250cm9sLkJVQ0tFVF9PV05FUl9GVUxMX0NPTlRST0wsXG4gIHNlcnZlckFjY2Vzc0xvZ3NCdWNrZXQ6IHRhcmdldEJ1Y2tldCxcbiAgc2VydmVyQWNjZXNzTG9nc1ByZWZpeDogJ3Rlc3QvJyxcbn0pO1xuXG5uZXcgaW50ZWcuSW50ZWdUZXN0KGFwcCwgJ1NlcnZlckFjY2Vzc0xvZ3NJbXBvcnRUZXN0Jywge1xuICB0ZXN0Q2FzZXM6IFtzb3VyY2VCdWNrZXRTdGFja10sXG59KTtcbiJdfQ==