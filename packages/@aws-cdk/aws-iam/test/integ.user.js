"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const core_1 = require("@aws-cdk/core");
const integ_tests_1 = require("@aws-cdk/integ-tests");
const lib_1 = require("../lib");
const app = new core_1.App();
const stack = new core_1.Stack(app, 'aws-cdk-iam-user');
new lib_1.User(stack, 'MyUser', {
    userName: 'benisrae',
    password: core_1.SecretValue.unsafePlainText('Test1234567890!'),
    passwordResetRequired: true,
});
const userImportedByArn = lib_1.User.fromUserArn(stack, 'ImportedUserByArn', 'arn:aws:iam::123456789012:user/rossrhodes');
const userImportedByArnWithPath = lib_1.User.fromUserArn(stack, 'ImportedUserByArnPath', 'arn:aws:iam::123456789012:user/path/johndoe');
const userImportedByArnPathMultiple = lib_1.User.fromUserArn(stack, 'ImportedUserByArnPathMultiple', 'arn:aws:iam::123456789012:user/p/a/t/h/johndoe');
const userImportedByAttributes = lib_1.User.fromUserAttributes(stack, 'ImportedUserByAttributes', {
    userArn: 'arn:aws:iam::123456789012:user/johndoe',
});
const userImportedByAttributesPath = lib_1.User.fromUserAttributes(stack, 'ImportedUserByAttributesPath', {
    userArn: 'arn:aws:iam::123456789012:user/path/johndoe',
});
const userImportedByAttributesPathMultiple = lib_1.User.fromUserAttributes(stack, 'ImportedUserByAttributesPathMultiple', {
    userArn: 'arn:aws:iam::123456789012:user/p/a/t/h/johndoe',
});
const userImportedByName = lib_1.User.fromUserName(stack, 'ImportedUserByName', 'janedoe');
new core_1.CfnOutput(stack, 'NameForUserImportedByArn', { value: userImportedByArn.userName });
new core_1.CfnOutput(stack, 'NameForUserImportedByArnPath', { value: userImportedByArnWithPath.userName });
new core_1.CfnOutput(stack, 'NameForUserImportedByArnPathMultiple', { value: userImportedByArnPathMultiple.userName });
new core_1.CfnOutput(stack, 'NameForUserImportedByAttributes', { value: userImportedByAttributes.userName });
new core_1.CfnOutput(stack, 'NameForUserImportedByAttributesPath', { value: userImportedByAttributesPath.userName });
new core_1.CfnOutput(stack, 'NameForUserImportedByAttributesPathMultiple', { value: userImportedByAttributesPathMultiple.userName });
new core_1.CfnOutput(stack, 'NameForUserImportedByName', { value: userImportedByName.userName });
new integ_tests_1.IntegTest(app, 'iam-user-test', {
    testCases: [stack],
});
app.synth();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW50ZWcudXNlci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbImludGVnLnVzZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSx3Q0FBbUU7QUFDbkUsc0RBQWlEO0FBQ2pELGdDQUE4QjtBQUU5QixNQUFNLEdBQUcsR0FBRyxJQUFJLFVBQUcsRUFBRSxDQUFDO0FBRXRCLE1BQU0sS0FBSyxHQUFHLElBQUksWUFBSyxDQUFDLEdBQUcsRUFBRSxrQkFBa0IsQ0FBQyxDQUFDO0FBRWpELElBQUksVUFBSSxDQUFDLEtBQUssRUFBRSxRQUFRLEVBQUU7SUFDeEIsUUFBUSxFQUFFLFVBQVU7SUFDcEIsUUFBUSxFQUFFLGtCQUFXLENBQUMsZUFBZSxDQUFDLGlCQUFpQixDQUFDO0lBQ3hELHFCQUFxQixFQUFFLElBQUk7Q0FDNUIsQ0FBQyxDQUFDO0FBRUgsTUFBTSxpQkFBaUIsR0FBRyxVQUFJLENBQUMsV0FBVyxDQUFDLEtBQUssRUFBRSxtQkFBbUIsRUFBRSwyQ0FBMkMsQ0FBQyxDQUFDO0FBQ3BILE1BQU0seUJBQXlCLEdBQUcsVUFBSSxDQUFDLFdBQVcsQ0FBQyxLQUFLLEVBQUUsdUJBQXVCLEVBQUUsNkNBQTZDLENBQUMsQ0FBQztBQUNsSSxNQUFNLDZCQUE2QixHQUFHLFVBQUksQ0FBQyxXQUFXLENBQUMsS0FBSyxFQUFFLCtCQUErQixFQUFFLGdEQUFnRCxDQUFDLENBQUM7QUFDakosTUFBTSx3QkFBd0IsR0FBRyxVQUFJLENBQUMsa0JBQWtCLENBQUMsS0FBSyxFQUFFLDBCQUEwQixFQUFFO0lBQzFGLE9BQU8sRUFBRSx3Q0FBd0M7Q0FDbEQsQ0FBQyxDQUFDO0FBQ0gsTUFBTSw0QkFBNEIsR0FBRyxVQUFJLENBQUMsa0JBQWtCLENBQUMsS0FBSyxFQUFFLDhCQUE4QixFQUFFO0lBQ2xHLE9BQU8sRUFBRSw2Q0FBNkM7Q0FDdkQsQ0FBQyxDQUFDO0FBQ0gsTUFBTSxvQ0FBb0MsR0FBRyxVQUFJLENBQUMsa0JBQWtCLENBQUMsS0FBSyxFQUFFLHNDQUFzQyxFQUFFO0lBQ2xILE9BQU8sRUFBRSxnREFBZ0Q7Q0FDMUQsQ0FBQyxDQUFDO0FBQ0gsTUFBTSxrQkFBa0IsR0FBRyxVQUFJLENBQUMsWUFBWSxDQUFDLEtBQUssRUFBRSxvQkFBb0IsRUFBRSxTQUFTLENBQUMsQ0FBQztBQUVyRixJQUFJLGdCQUFTLENBQUMsS0FBSyxFQUFFLDBCQUEwQixFQUFFLEVBQUUsS0FBSyxFQUFFLGlCQUFpQixDQUFDLFFBQVEsRUFBRSxDQUFDLENBQUM7QUFDeEYsSUFBSSxnQkFBUyxDQUFDLEtBQUssRUFBRSw4QkFBOEIsRUFBRSxFQUFFLEtBQUssRUFBRSx5QkFBeUIsQ0FBQyxRQUFRLEVBQUUsQ0FBQyxDQUFDO0FBQ3BHLElBQUksZ0JBQVMsQ0FBQyxLQUFLLEVBQUUsc0NBQXNDLEVBQUUsRUFBRSxLQUFLLEVBQUUsNkJBQTZCLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztBQUNoSCxJQUFJLGdCQUFTLENBQUMsS0FBSyxFQUFFLGlDQUFpQyxFQUFFLEVBQUUsS0FBSyxFQUFFLHdCQUF3QixDQUFDLFFBQVEsRUFBRSxDQUFDLENBQUM7QUFDdEcsSUFBSSxnQkFBUyxDQUFDLEtBQUssRUFBRSxxQ0FBcUMsRUFBRSxFQUFFLEtBQUssRUFBRSw0QkFBNEIsQ0FBQyxRQUFRLEVBQUUsQ0FBQyxDQUFDO0FBQzlHLElBQUksZ0JBQVMsQ0FBQyxLQUFLLEVBQUUsNkNBQTZDLEVBQUUsRUFBRSxLQUFLLEVBQUUsb0NBQW9DLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztBQUM5SCxJQUFJLGdCQUFTLENBQUMsS0FBSyxFQUFFLDJCQUEyQixFQUFFLEVBQUUsS0FBSyxFQUFFLGtCQUFrQixDQUFDLFFBQVEsRUFBRSxDQUFDLENBQUM7QUFFMUYsSUFBSSx1QkFBUyxDQUFDLEdBQUcsRUFBRSxlQUFlLEVBQUU7SUFDbEMsU0FBUyxFQUFFLENBQUMsS0FBSyxDQUFDO0NBQ25CLENBQUMsQ0FBQztBQUVILEdBQUcsQ0FBQyxLQUFLLEVBQUUsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEFwcCwgQ2ZuT3V0cHV0LCBTZWNyZXRWYWx1ZSwgU3RhY2sgfSBmcm9tICdAYXdzLWNkay9jb3JlJztcbmltcG9ydCB7IEludGVnVGVzdCB9IGZyb20gJ0Bhd3MtY2RrL2ludGVnLXRlc3RzJztcbmltcG9ydCB7IFVzZXIgfSBmcm9tICcuLi9saWInO1xuXG5jb25zdCBhcHAgPSBuZXcgQXBwKCk7XG5cbmNvbnN0IHN0YWNrID0gbmV3IFN0YWNrKGFwcCwgJ2F3cy1jZGstaWFtLXVzZXInKTtcblxubmV3IFVzZXIoc3RhY2ssICdNeVVzZXInLCB7XG4gIHVzZXJOYW1lOiAnYmVuaXNyYWUnLFxuICBwYXNzd29yZDogU2VjcmV0VmFsdWUudW5zYWZlUGxhaW5UZXh0KCdUZXN0MTIzNDU2Nzg5MCEnKSxcbiAgcGFzc3dvcmRSZXNldFJlcXVpcmVkOiB0cnVlLFxufSk7XG5cbmNvbnN0IHVzZXJJbXBvcnRlZEJ5QXJuID0gVXNlci5mcm9tVXNlckFybihzdGFjaywgJ0ltcG9ydGVkVXNlckJ5QXJuJywgJ2Fybjphd3M6aWFtOjoxMjM0NTY3ODkwMTI6dXNlci9yb3NzcmhvZGVzJyk7XG5jb25zdCB1c2VySW1wb3J0ZWRCeUFybldpdGhQYXRoID0gVXNlci5mcm9tVXNlckFybihzdGFjaywgJ0ltcG9ydGVkVXNlckJ5QXJuUGF0aCcsICdhcm46YXdzOmlhbTo6MTIzNDU2Nzg5MDEyOnVzZXIvcGF0aC9qb2huZG9lJyk7XG5jb25zdCB1c2VySW1wb3J0ZWRCeUFyblBhdGhNdWx0aXBsZSA9IFVzZXIuZnJvbVVzZXJBcm4oc3RhY2ssICdJbXBvcnRlZFVzZXJCeUFyblBhdGhNdWx0aXBsZScsICdhcm46YXdzOmlhbTo6MTIzNDU2Nzg5MDEyOnVzZXIvcC9hL3QvaC9qb2huZG9lJyk7XG5jb25zdCB1c2VySW1wb3J0ZWRCeUF0dHJpYnV0ZXMgPSBVc2VyLmZyb21Vc2VyQXR0cmlidXRlcyhzdGFjaywgJ0ltcG9ydGVkVXNlckJ5QXR0cmlidXRlcycsIHtcbiAgdXNlckFybjogJ2Fybjphd3M6aWFtOjoxMjM0NTY3ODkwMTI6dXNlci9qb2huZG9lJyxcbn0pO1xuY29uc3QgdXNlckltcG9ydGVkQnlBdHRyaWJ1dGVzUGF0aCA9IFVzZXIuZnJvbVVzZXJBdHRyaWJ1dGVzKHN0YWNrLCAnSW1wb3J0ZWRVc2VyQnlBdHRyaWJ1dGVzUGF0aCcsIHtcbiAgdXNlckFybjogJ2Fybjphd3M6aWFtOjoxMjM0NTY3ODkwMTI6dXNlci9wYXRoL2pvaG5kb2UnLFxufSk7XG5jb25zdCB1c2VySW1wb3J0ZWRCeUF0dHJpYnV0ZXNQYXRoTXVsdGlwbGUgPSBVc2VyLmZyb21Vc2VyQXR0cmlidXRlcyhzdGFjaywgJ0ltcG9ydGVkVXNlckJ5QXR0cmlidXRlc1BhdGhNdWx0aXBsZScsIHtcbiAgdXNlckFybjogJ2Fybjphd3M6aWFtOjoxMjM0NTY3ODkwMTI6dXNlci9wL2EvdC9oL2pvaG5kb2UnLFxufSk7XG5jb25zdCB1c2VySW1wb3J0ZWRCeU5hbWUgPSBVc2VyLmZyb21Vc2VyTmFtZShzdGFjaywgJ0ltcG9ydGVkVXNlckJ5TmFtZScsICdqYW5lZG9lJyk7XG5cbm5ldyBDZm5PdXRwdXQoc3RhY2ssICdOYW1lRm9yVXNlckltcG9ydGVkQnlBcm4nLCB7IHZhbHVlOiB1c2VySW1wb3J0ZWRCeUFybi51c2VyTmFtZSB9KTtcbm5ldyBDZm5PdXRwdXQoc3RhY2ssICdOYW1lRm9yVXNlckltcG9ydGVkQnlBcm5QYXRoJywgeyB2YWx1ZTogdXNlckltcG9ydGVkQnlBcm5XaXRoUGF0aC51c2VyTmFtZSB9KTtcbm5ldyBDZm5PdXRwdXQoc3RhY2ssICdOYW1lRm9yVXNlckltcG9ydGVkQnlBcm5QYXRoTXVsdGlwbGUnLCB7IHZhbHVlOiB1c2VySW1wb3J0ZWRCeUFyblBhdGhNdWx0aXBsZS51c2VyTmFtZSB9KTtcbm5ldyBDZm5PdXRwdXQoc3RhY2ssICdOYW1lRm9yVXNlckltcG9ydGVkQnlBdHRyaWJ1dGVzJywgeyB2YWx1ZTogdXNlckltcG9ydGVkQnlBdHRyaWJ1dGVzLnVzZXJOYW1lIH0pO1xubmV3IENmbk91dHB1dChzdGFjaywgJ05hbWVGb3JVc2VySW1wb3J0ZWRCeUF0dHJpYnV0ZXNQYXRoJywgeyB2YWx1ZTogdXNlckltcG9ydGVkQnlBdHRyaWJ1dGVzUGF0aC51c2VyTmFtZSB9KTtcbm5ldyBDZm5PdXRwdXQoc3RhY2ssICdOYW1lRm9yVXNlckltcG9ydGVkQnlBdHRyaWJ1dGVzUGF0aE11bHRpcGxlJywgeyB2YWx1ZTogdXNlckltcG9ydGVkQnlBdHRyaWJ1dGVzUGF0aE11bHRpcGxlLnVzZXJOYW1lIH0pO1xubmV3IENmbk91dHB1dChzdGFjaywgJ05hbWVGb3JVc2VySW1wb3J0ZWRCeU5hbWUnLCB7IHZhbHVlOiB1c2VySW1wb3J0ZWRCeU5hbWUudXNlck5hbWUgfSk7XG5cbm5ldyBJbnRlZ1Rlc3QoYXBwLCAnaWFtLXVzZXItdGVzdCcsIHtcbiAgdGVzdENhc2VzOiBbc3RhY2tdLFxufSk7XG5cbmFwcC5zeW50aCgpO1xuIl19