"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const core_1 = require("@aws-cdk/core");
const cx_api_1 = require("@aws-cdk/cx-api");
const integ = require("@aws-cdk/integ-tests");
const lib_1 = require("../lib");
const app = new core_1.App({ context: { [cx_api_1.IAM_IMPORTED_ROLE_STACK_SAFE_DEFAULT_POLICY_NAME]: true } });
const roleStack = new core_1.Stack(app, 'integ-iam-imported-role-role-stack');
const role = new lib_1.Role(roleStack, 'TestRole', {
    assumedBy: new lib_1.ServicePrincipal('sqs.amazonaws.com'),
});
const firstStack = new core_1.Stack(app, 'integ-iam-imported-role-1');
const roleInFirstStack = lib_1.Role.fromRoleName(firstStack, 'Role', role.roleName);
roleInFirstStack.addToPrincipalPolicy(new lib_1.PolicyStatement({ resources: ['arn:aws:sqs:*:*:firstQueue'], actions: ['sqs:SendMessage'] }));
const secondStack = new core_1.Stack(app, 'integ-iam-imported-role-2');
secondStack.addDependency(firstStack, 'So that this stack can be tested after both are deployed.');
const roleInSecondStack = lib_1.Role.fromRoleName(secondStack, 'Role', role.roleName);
roleInSecondStack.addToPrincipalPolicy(new lib_1.PolicyStatement({ resources: ['arn:aws:sqs:*:*:secondQueue'], actions: ['sqs:SendMessage'] }));
const assertionStack = new core_1.Stack(app, 'ImportedRoleTestAssertions');
assertionStack.addDependency(roleStack);
assertionStack.addDependency(firstStack);
assertionStack.addDependency(secondStack);
const test = new integ.IntegTest(app, 'ImportedRoleTest', {
    testCases: [roleStack],
    assertionStack,
});
test.assertions
    .awsApiCall('IAM', 'listRolePolicies', { RoleName: role.roleName })
    .assertAtPath('PolicyNames.0', integ.ExpectedResult.stringLikeRegexp('^Policyintegiamimportedrole1Role.{8}$'))
    .assertAtPath('PolicyNames.1', integ.ExpectedResult.stringLikeRegexp('^Policyintegiamimportedrole2Role.{8}$'));
app.synth();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW50ZWcuaW1wb3J0ZWQtcm9sZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbImludGVnLmltcG9ydGVkLXJvbGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSx3Q0FBMkM7QUFDM0MsNENBRXlCO0FBQ3pCLDhDQUE4QztBQUM5QyxnQ0FBaUU7QUFFakUsTUFBTSxHQUFHLEdBQUcsSUFBSSxVQUFHLENBQUMsRUFBRSxPQUFPLEVBQUUsRUFBRSxDQUFDLHlEQUFnRCxDQUFDLEVBQUUsSUFBSSxFQUFFLEVBQUUsQ0FBQyxDQUFDO0FBRS9GLE1BQU0sU0FBUyxHQUFHLElBQUksWUFBSyxDQUFDLEdBQUcsRUFBRSxvQ0FBb0MsQ0FBQyxDQUFDO0FBRXZFLE1BQU0sSUFBSSxHQUFHLElBQUksVUFBSSxDQUFDLFNBQVMsRUFBRSxVQUFVLEVBQUU7SUFDM0MsU0FBUyxFQUFFLElBQUksc0JBQWdCLENBQUMsbUJBQW1CLENBQUM7Q0FDckQsQ0FBQyxDQUFDO0FBRUgsTUFBTSxVQUFVLEdBQUcsSUFBSSxZQUFLLENBQUMsR0FBRyxFQUFFLDJCQUEyQixDQUFDLENBQUM7QUFDL0QsTUFBTSxnQkFBZ0IsR0FBRyxVQUFJLENBQUMsWUFBWSxDQUFDLFVBQVUsRUFBRSxNQUFNLEVBQUUsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDO0FBQzlFLGdCQUFnQixDQUFDLG9CQUFvQixDQUFDLElBQUkscUJBQWUsQ0FBQyxFQUFFLFNBQVMsRUFBRSxDQUFDLDRCQUE0QixDQUFDLEVBQUUsT0FBTyxFQUFFLENBQUMsaUJBQWlCLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQztBQUV4SSxNQUFNLFdBQVcsR0FBRyxJQUFJLFlBQUssQ0FBQyxHQUFHLEVBQUUsMkJBQTJCLENBQUMsQ0FBQztBQUNoRSxXQUFXLENBQUMsYUFBYSxDQUFDLFVBQVUsRUFBRSwyREFBMkQsQ0FBQyxDQUFDO0FBQ25HLE1BQU0saUJBQWlCLEdBQUcsVUFBSSxDQUFDLFlBQVksQ0FBQyxXQUFXLEVBQUUsTUFBTSxFQUFFLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQztBQUNoRixpQkFBaUIsQ0FBQyxvQkFBb0IsQ0FBQyxJQUFJLHFCQUFlLENBQUMsRUFBRSxTQUFTLEVBQUUsQ0FBQyw2QkFBNkIsQ0FBQyxFQUFFLE9BQU8sRUFBRSxDQUFDLGlCQUFpQixDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7QUFFMUksTUFBTSxjQUFjLEdBQUcsSUFBSSxZQUFLLENBQUMsR0FBRyxFQUFFLDRCQUE0QixDQUFDLENBQUM7QUFDcEUsY0FBYyxDQUFDLGFBQWEsQ0FBQyxTQUFTLENBQUMsQ0FBQztBQUN4QyxjQUFjLENBQUMsYUFBYSxDQUFDLFVBQVUsQ0FBQyxDQUFDO0FBQ3pDLGNBQWMsQ0FBQyxhQUFhLENBQUMsV0FBVyxDQUFDLENBQUM7QUFFMUMsTUFBTSxJQUFJLEdBQUcsSUFBSSxLQUFLLENBQUMsU0FBUyxDQUFDLEdBQUcsRUFBRSxrQkFBa0IsRUFBRTtJQUN4RCxTQUFTLEVBQUUsQ0FBQyxTQUFTLENBQUM7SUFDdEIsY0FBYztDQUNmLENBQUMsQ0FBQztBQUVILElBQUksQ0FBQyxVQUFVO0tBQ1osVUFBVSxDQUFDLEtBQUssRUFBRSxrQkFBa0IsRUFBRSxFQUFFLFFBQVEsRUFBRSxJQUFJLENBQUMsUUFBUSxFQUFFLENBQUM7S0FDbEUsWUFBWSxDQUFDLGVBQWUsRUFBRSxLQUFLLENBQUMsY0FBYyxDQUFDLGdCQUFnQixDQUFDLHVDQUF1QyxDQUFDLENBQUM7S0FDN0csWUFBWSxDQUFDLGVBQWUsRUFBRSxLQUFLLENBQUMsY0FBYyxDQUFDLGdCQUFnQixDQUFDLHVDQUF1QyxDQUFDLENBQUMsQ0FBQztBQUVqSCxHQUFHLENBQUMsS0FBSyxFQUFFLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBBcHAsIFN0YWNrIH0gZnJvbSAnQGF3cy1jZGsvY29yZSc7XG5pbXBvcnQge1xuICBJQU1fSU1QT1JURURfUk9MRV9TVEFDS19TQUZFX0RFRkFVTFRfUE9MSUNZX05BTUUsXG59IGZyb20gJ0Bhd3MtY2RrL2N4LWFwaSc7XG5pbXBvcnQgKiBhcyBpbnRlZyBmcm9tICdAYXdzLWNkay9pbnRlZy10ZXN0cyc7XG5pbXBvcnQgeyBQb2xpY3lTdGF0ZW1lbnQsIFJvbGUsIFNlcnZpY2VQcmluY2lwYWwgfSBmcm9tICcuLi9saWInO1xuXG5jb25zdCBhcHAgPSBuZXcgQXBwKHsgY29udGV4dDogeyBbSUFNX0lNUE9SVEVEX1JPTEVfU1RBQ0tfU0FGRV9ERUZBVUxUX1BPTElDWV9OQU1FXTogdHJ1ZSB9IH0pO1xuXG5jb25zdCByb2xlU3RhY2sgPSBuZXcgU3RhY2soYXBwLCAnaW50ZWctaWFtLWltcG9ydGVkLXJvbGUtcm9sZS1zdGFjaycpO1xuXG5jb25zdCByb2xlID0gbmV3IFJvbGUocm9sZVN0YWNrLCAnVGVzdFJvbGUnLCB7XG4gIGFzc3VtZWRCeTogbmV3IFNlcnZpY2VQcmluY2lwYWwoJ3Nxcy5hbWF6b25hd3MuY29tJyksXG59KTtcblxuY29uc3QgZmlyc3RTdGFjayA9IG5ldyBTdGFjayhhcHAsICdpbnRlZy1pYW0taW1wb3J0ZWQtcm9sZS0xJyk7XG5jb25zdCByb2xlSW5GaXJzdFN0YWNrID0gUm9sZS5mcm9tUm9sZU5hbWUoZmlyc3RTdGFjaywgJ1JvbGUnLCByb2xlLnJvbGVOYW1lKTtcbnJvbGVJbkZpcnN0U3RhY2suYWRkVG9QcmluY2lwYWxQb2xpY3kobmV3IFBvbGljeVN0YXRlbWVudCh7IHJlc291cmNlczogWydhcm46YXdzOnNxczoqOio6Zmlyc3RRdWV1ZSddLCBhY3Rpb25zOiBbJ3NxczpTZW5kTWVzc2FnZSddIH0pKTtcblxuY29uc3Qgc2Vjb25kU3RhY2sgPSBuZXcgU3RhY2soYXBwLCAnaW50ZWctaWFtLWltcG9ydGVkLXJvbGUtMicpO1xuc2Vjb25kU3RhY2suYWRkRGVwZW5kZW5jeShmaXJzdFN0YWNrLCAnU28gdGhhdCB0aGlzIHN0YWNrIGNhbiBiZSB0ZXN0ZWQgYWZ0ZXIgYm90aCBhcmUgZGVwbG95ZWQuJyk7XG5jb25zdCByb2xlSW5TZWNvbmRTdGFjayA9IFJvbGUuZnJvbVJvbGVOYW1lKHNlY29uZFN0YWNrLCAnUm9sZScsIHJvbGUucm9sZU5hbWUpO1xucm9sZUluU2Vjb25kU3RhY2suYWRkVG9QcmluY2lwYWxQb2xpY3kobmV3IFBvbGljeVN0YXRlbWVudCh7IHJlc291cmNlczogWydhcm46YXdzOnNxczoqOio6c2Vjb25kUXVldWUnXSwgYWN0aW9uczogWydzcXM6U2VuZE1lc3NhZ2UnXSB9KSk7XG5cbmNvbnN0IGFzc2VydGlvblN0YWNrID0gbmV3IFN0YWNrKGFwcCwgJ0ltcG9ydGVkUm9sZVRlc3RBc3NlcnRpb25zJyk7XG5hc3NlcnRpb25TdGFjay5hZGREZXBlbmRlbmN5KHJvbGVTdGFjayk7XG5hc3NlcnRpb25TdGFjay5hZGREZXBlbmRlbmN5KGZpcnN0U3RhY2spO1xuYXNzZXJ0aW9uU3RhY2suYWRkRGVwZW5kZW5jeShzZWNvbmRTdGFjayk7XG5cbmNvbnN0IHRlc3QgPSBuZXcgaW50ZWcuSW50ZWdUZXN0KGFwcCwgJ0ltcG9ydGVkUm9sZVRlc3QnLCB7XG4gIHRlc3RDYXNlczogW3JvbGVTdGFja10sXG4gIGFzc2VydGlvblN0YWNrLFxufSk7XG5cbnRlc3QuYXNzZXJ0aW9uc1xuICAuYXdzQXBpQ2FsbCgnSUFNJywgJ2xpc3RSb2xlUG9saWNpZXMnLCB7IFJvbGVOYW1lOiByb2xlLnJvbGVOYW1lIH0pXG4gIC5hc3NlcnRBdFBhdGgoJ1BvbGljeU5hbWVzLjAnLCBpbnRlZy5FeHBlY3RlZFJlc3VsdC5zdHJpbmdMaWtlUmVnZXhwKCdeUG9saWN5aW50ZWdpYW1pbXBvcnRlZHJvbGUxUm9sZS57OH0kJykpXG4gIC5hc3NlcnRBdFBhdGgoJ1BvbGljeU5hbWVzLjEnLCBpbnRlZy5FeHBlY3RlZFJlc3VsdC5zdHJpbmdMaWtlUmVnZXhwKCdeUG9saWN5aW50ZWdpYW1pbXBvcnRlZHJvbGUyUm9sZS57OH0kJykpO1xuXG5hcHAuc3ludGgoKTtcbiJdfQ==