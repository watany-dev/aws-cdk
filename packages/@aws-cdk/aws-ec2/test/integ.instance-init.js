#!/usr/bin/env node
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const fs = require("fs");
const path = require("path");
const cdk = require("@aws-cdk/core");
const ec2 = require("../lib");
const app = new cdk.App();
const stack = new cdk.Stack(app, 'integ-init');
const vpc = new ec2.Vpc(stack, 'IntegInitVpc');
const tmpDir = fs.mkdtempSync('/tmp/cfn-init-test');
fs.writeFileSync(path.resolve(tmpDir, 'testFile'), 'Hello World!\n');
new ec2.Instance(stack, 'Instance2', {
    vpc,
    vpcSubnets: { subnetType: ec2.SubnetType.PUBLIC },
    instanceType: ec2.InstanceType.of(ec2.InstanceClass.BURSTABLE2, ec2.InstanceSize.MICRO),
    machineImage: new ec2.AmazonLinuxImage(),
    userDataCausesReplacement: true,
    initOptions: {
        timeout: cdk.Duration.minutes(30),
    },
    init: ec2.CloudFormationInit.fromConfigSets({
        configSets: {
            default: ['yumPreinstall', 'config'],
        },
        configs: {
            yumPreinstall: new ec2.InitConfig([
                ec2.InitPackage.yum('git'),
            ]),
            config: new ec2.InitConfig([
                ec2.InitFile.fromObject('/tmp/file2.json', {
                    stackId: stack.stackId,
                    stackName: stack.stackName,
                    region: stack.region,
                    intProperty: 18,
                    boolProperty: true,
                    numProperty: 58.23,
                }),
                ec2.InitGroup.fromName('group1'),
                ec2.InitGroup.fromName('group2', 42),
                ec2.InitUser.fromName('sysuser1', {
                    groups: ['group1', 'group2'],
                    homeDir: '/home/sysuser1-custom',
                }),
                ec2.InitUser.fromName('sysuser2'),
                ec2.InitSource.fromAsset('/tmp/sourceDir', tmpDir),
            ]),
        },
    }),
});
app.synth();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW50ZWcuaW5zdGFuY2UtaW5pdC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbImludGVnLmluc3RhbmNlLWluaXQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBQ0EseUJBQXlCO0FBQ3pCLDZCQUE2QjtBQUM3QixxQ0FBcUM7QUFDckMsOEJBQThCO0FBRTlCLE1BQU0sR0FBRyxHQUFHLElBQUksR0FBRyxDQUFDLEdBQUcsRUFBRSxDQUFDO0FBQzFCLE1BQU0sS0FBSyxHQUFHLElBQUksR0FBRyxDQUFDLEtBQUssQ0FBQyxHQUFHLEVBQUUsWUFBWSxDQUFDLENBQUM7QUFFL0MsTUFBTSxHQUFHLEdBQUcsSUFBSSxHQUFHLENBQUMsR0FBRyxDQUFDLEtBQUssRUFBRSxjQUFjLENBQUMsQ0FBQztBQUUvQyxNQUFNLE1BQU0sR0FBRyxFQUFFLENBQUMsV0FBVyxDQUFDLG9CQUFvQixDQUFDLENBQUM7QUFDcEQsRUFBRSxDQUFDLGFBQWEsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLE1BQU0sRUFBRSxVQUFVLENBQUMsRUFBRSxnQkFBZ0IsQ0FBQyxDQUFDO0FBRXJFLElBQUksR0FBRyxDQUFDLFFBQVEsQ0FBQyxLQUFLLEVBQUUsV0FBVyxFQUFFO0lBQ25DLEdBQUc7SUFDSCxVQUFVLEVBQUUsRUFBRSxVQUFVLEVBQUUsR0FBRyxDQUFDLFVBQVUsQ0FBQyxNQUFNLEVBQUU7SUFDakQsWUFBWSxFQUFFLEdBQUcsQ0FBQyxZQUFZLENBQUMsRUFBRSxDQUFDLEdBQUcsQ0FBQyxhQUFhLENBQUMsVUFBVSxFQUFFLEdBQUcsQ0FBQyxZQUFZLENBQUMsS0FBSyxDQUFDO0lBQ3ZGLFlBQVksRUFBRSxJQUFJLEdBQUcsQ0FBQyxnQkFBZ0IsRUFBRTtJQUN4Qyx5QkFBeUIsRUFBRSxJQUFJO0lBQy9CLFdBQVcsRUFBRTtRQUNYLE9BQU8sRUFBRSxHQUFHLENBQUMsUUFBUSxDQUFDLE9BQU8sQ0FBQyxFQUFFLENBQUM7S0FDbEM7SUFDRCxJQUFJLEVBQUUsR0FBRyxDQUFDLGtCQUFrQixDQUFDLGNBQWMsQ0FBQztRQUMxQyxVQUFVLEVBQUU7WUFDVixPQUFPLEVBQUUsQ0FBQyxlQUFlLEVBQUUsUUFBUSxDQUFDO1NBQ3JDO1FBQ0QsT0FBTyxFQUFFO1lBQ1AsYUFBYSxFQUFFLElBQUksR0FBRyxDQUFDLFVBQVUsQ0FBQztnQkFDaEMsR0FBRyxDQUFDLFdBQVcsQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDO2FBQzNCLENBQUM7WUFDRixNQUFNLEVBQUUsSUFBSSxHQUFHLENBQUMsVUFBVSxDQUFDO2dCQUN6QixHQUFHLENBQUMsUUFBUSxDQUFDLFVBQVUsQ0FBQyxpQkFBaUIsRUFBRTtvQkFDekMsT0FBTyxFQUFFLEtBQUssQ0FBQyxPQUFPO29CQUN0QixTQUFTLEVBQUUsS0FBSyxDQUFDLFNBQVM7b0JBQzFCLE1BQU0sRUFBRSxLQUFLLENBQUMsTUFBTTtvQkFDcEIsV0FBVyxFQUFFLEVBQUU7b0JBQ2YsWUFBWSxFQUFFLElBQUk7b0JBQ2xCLFdBQVcsRUFBRSxLQUFLO2lCQUNuQixDQUFDO2dCQUNGLEdBQUcsQ0FBQyxTQUFTLENBQUMsUUFBUSxDQUFDLFFBQVEsQ0FBQztnQkFDaEMsR0FBRyxDQUFDLFNBQVMsQ0FBQyxRQUFRLENBQUMsUUFBUSxFQUFFLEVBQUUsQ0FBQztnQkFDcEMsR0FBRyxDQUFDLFFBQVEsQ0FBQyxRQUFRLENBQUMsVUFBVSxFQUFFO29CQUNoQyxNQUFNLEVBQUUsQ0FBQyxRQUFRLEVBQUUsUUFBUSxDQUFDO29CQUM1QixPQUFPLEVBQUUsdUJBQXVCO2lCQUNqQyxDQUFDO2dCQUNGLEdBQUcsQ0FBQyxRQUFRLENBQUMsUUFBUSxDQUFDLFVBQVUsQ0FBQztnQkFDakMsR0FBRyxDQUFDLFVBQVUsQ0FBQyxTQUFTLENBQUMsZ0JBQWdCLEVBQUUsTUFBTSxDQUFDO2FBQ25ELENBQUM7U0FDSDtLQUNGLENBQUM7Q0FDSCxDQUFDLENBQUM7QUFFSCxHQUFHLENBQUMsS0FBSyxFQUFFLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIjIS91c3IvYmluL2VudiBub2RlXG5pbXBvcnQgKiBhcyBmcyBmcm9tICdmcyc7XG5pbXBvcnQgKiBhcyBwYXRoIGZyb20gJ3BhdGgnO1xuaW1wb3J0ICogYXMgY2RrIGZyb20gJ0Bhd3MtY2RrL2NvcmUnO1xuaW1wb3J0ICogYXMgZWMyIGZyb20gJy4uL2xpYic7XG5cbmNvbnN0IGFwcCA9IG5ldyBjZGsuQXBwKCk7XG5jb25zdCBzdGFjayA9IG5ldyBjZGsuU3RhY2soYXBwLCAnaW50ZWctaW5pdCcpO1xuXG5jb25zdCB2cGMgPSBuZXcgZWMyLlZwYyhzdGFjaywgJ0ludGVnSW5pdFZwYycpO1xuXG5jb25zdCB0bXBEaXIgPSBmcy5ta2R0ZW1wU3luYygnL3RtcC9jZm4taW5pdC10ZXN0Jyk7XG5mcy53cml0ZUZpbGVTeW5jKHBhdGgucmVzb2x2ZSh0bXBEaXIsICd0ZXN0RmlsZScpLCAnSGVsbG8gV29ybGQhXFxuJyk7XG5cbm5ldyBlYzIuSW5zdGFuY2Uoc3RhY2ssICdJbnN0YW5jZTInLCB7XG4gIHZwYyxcbiAgdnBjU3VibmV0czogeyBzdWJuZXRUeXBlOiBlYzIuU3VibmV0VHlwZS5QVUJMSUMgfSxcbiAgaW5zdGFuY2VUeXBlOiBlYzIuSW5zdGFuY2VUeXBlLm9mKGVjMi5JbnN0YW5jZUNsYXNzLkJVUlNUQUJMRTIsIGVjMi5JbnN0YW5jZVNpemUuTUlDUk8pLFxuICBtYWNoaW5lSW1hZ2U6IG5ldyBlYzIuQW1hem9uTGludXhJbWFnZSgpLFxuICB1c2VyRGF0YUNhdXNlc1JlcGxhY2VtZW50OiB0cnVlLFxuICBpbml0T3B0aW9uczoge1xuICAgIHRpbWVvdXQ6IGNkay5EdXJhdGlvbi5taW51dGVzKDMwKSxcbiAgfSxcbiAgaW5pdDogZWMyLkNsb3VkRm9ybWF0aW9uSW5pdC5mcm9tQ29uZmlnU2V0cyh7XG4gICAgY29uZmlnU2V0czoge1xuICAgICAgZGVmYXVsdDogWyd5dW1QcmVpbnN0YWxsJywgJ2NvbmZpZyddLFxuICAgIH0sXG4gICAgY29uZmlnczoge1xuICAgICAgeXVtUHJlaW5zdGFsbDogbmV3IGVjMi5Jbml0Q29uZmlnKFtcbiAgICAgICAgZWMyLkluaXRQYWNrYWdlLnl1bSgnZ2l0JyksXG4gICAgICBdKSxcbiAgICAgIGNvbmZpZzogbmV3IGVjMi5Jbml0Q29uZmlnKFtcbiAgICAgICAgZWMyLkluaXRGaWxlLmZyb21PYmplY3QoJy90bXAvZmlsZTIuanNvbicsIHtcbiAgICAgICAgICBzdGFja0lkOiBzdGFjay5zdGFja0lkLFxuICAgICAgICAgIHN0YWNrTmFtZTogc3RhY2suc3RhY2tOYW1lLFxuICAgICAgICAgIHJlZ2lvbjogc3RhY2sucmVnaW9uLFxuICAgICAgICAgIGludFByb3BlcnR5OiAxOCxcbiAgICAgICAgICBib29sUHJvcGVydHk6IHRydWUsXG4gICAgICAgICAgbnVtUHJvcGVydHk6IDU4LjIzLFxuICAgICAgICB9KSxcbiAgICAgICAgZWMyLkluaXRHcm91cC5mcm9tTmFtZSgnZ3JvdXAxJyksXG4gICAgICAgIGVjMi5Jbml0R3JvdXAuZnJvbU5hbWUoJ2dyb3VwMicsIDQyKSxcbiAgICAgICAgZWMyLkluaXRVc2VyLmZyb21OYW1lKCdzeXN1c2VyMScsIHtcbiAgICAgICAgICBncm91cHM6IFsnZ3JvdXAxJywgJ2dyb3VwMiddLFxuICAgICAgICAgIGhvbWVEaXI6ICcvaG9tZS9zeXN1c2VyMS1jdXN0b20nLFxuICAgICAgICB9KSxcbiAgICAgICAgZWMyLkluaXRVc2VyLmZyb21OYW1lKCdzeXN1c2VyMicpLFxuICAgICAgICBlYzIuSW5pdFNvdXJjZS5mcm9tQXNzZXQoJy90bXAvc291cmNlRGlyJywgdG1wRGlyKSxcbiAgICAgIF0pLFxuICAgIH0sXG4gIH0pLFxufSk7XG5cbmFwcC5zeW50aCgpO1xuIl19