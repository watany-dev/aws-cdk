"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/// !cdk-integ *
const aws_iam_1 = require("@aws-cdk/aws-iam");
const cdk = require("@aws-cdk/core");
const ec2 = require("../lib");
const app = new cdk.App();
class TestStack extends cdk.Stack {
    constructor(scope, id, props) {
        super(scope, id, props);
        const vpc = new ec2.Vpc(this, 'VPC');
        // Here we test default separator as probably most useful
        const multipartUserData = new ec2.MultipartUserData();
        const userData1 = ec2.UserData.forLinux();
        userData1.addCommands('echo 大らと > /var/tmp/echo1');
        userData1.addCommands('cp /var/tmp/echo1 /var/tmp/echo1-copy');
        const userData2 = ec2.UserData.forLinux();
        userData2.addCommands(`echo 大らと ${vpc.vpcId}  > /var/tmp/echo2`);
        const rawPart1 = ec2.MultipartBody.fromRawBody({
            contentType: 'text/x-shellscript',
            body: 'echo "RawPart" > /var/tmp/rawPart1',
        });
        const rawPart2 = ec2.MultipartBody.fromRawBody({
            contentType: 'text/x-shellscript',
            body: `echo "RawPart ${vpc.vpcId}" > /var/tmp/rawPart2`,
        });
        const bootHook = ec2.UserData.forLinux();
        bootHook.addCommands('echo "Boothook2" > /var/tmp/boothook', 'cloud-init-per once docker_options echo \'OPTIONS="${OPTIONS} --storage-opt dm.basesize=20G"\' >> /etc/sysconfig/docker');
        multipartUserData.addPart(ec2.MultipartBody.fromUserData(userData1));
        multipartUserData.addPart(ec2.MultipartBody.fromUserData(userData2));
        multipartUserData.addPart(ec2.MultipartBody.fromUserData(bootHook, 'text/cloud-boothook'));
        const rawPart3 = ec2.MultipartBody.fromRawBody({
            contentType: 'text/x-shellscript',
            body: 'cp $0 /var/tmp/upstart # Should be one line file no new line at the end and beginning',
        });
        multipartUserData.addPart(rawPart1);
        multipartUserData.addPart(rawPart2);
        multipartUserData.addPart(rawPart3);
        const instance = new ec2.Instance(this, 'Instance', {
            vpc,
            instanceType: ec2.InstanceType.of(ec2.InstanceClass.T3, ec2.InstanceSize.NANO),
            machineImage: new ec2.AmazonLinuxImage({ generation: ec2.AmazonLinuxGeneration.AMAZON_LINUX_2 }),
            userData: multipartUserData,
        });
        instance.addToRolePolicy(new aws_iam_1.PolicyStatement({
            actions: ['ssm:*', 'ssmmessages:*', 'ec2messages:GetMessages'],
            resources: ['*'],
        }));
        instance.connections.allowFromAnyIpv4(ec2.Port.icmpPing());
    }
}
new TestStack(app, 'TestStackMultipartUserData');
app.synth();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW50ZWcuaW5zdGFuY2UtbXVsdGlwYXJ0LXVzZXJkYXRhLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiaW50ZWcuaW5zdGFuY2UtbXVsdGlwYXJ0LXVzZXJkYXRhLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsZ0JBQWdCO0FBQ2hCLDhDQUFtRDtBQUNuRCxxQ0FBcUM7QUFDckMsOEJBQThCO0FBRTlCLE1BQU0sR0FBRyxHQUFHLElBQUksR0FBRyxDQUFDLEdBQUcsRUFBRSxDQUFDO0FBRTFCLE1BQU0sU0FBVSxTQUFRLEdBQUcsQ0FBQyxLQUFLO0lBQy9CLFlBQVksS0FBYyxFQUFFLEVBQVUsRUFBRSxLQUFzQjtRQUM1RCxLQUFLLENBQUMsS0FBSyxFQUFFLEVBQUUsRUFBRSxLQUFLLENBQUMsQ0FBQztRQUV4QixNQUFNLEdBQUcsR0FBRyxJQUFJLEdBQUcsQ0FBQyxHQUFHLENBQUMsSUFBSSxFQUFFLEtBQUssQ0FBQyxDQUFDO1FBRXJDLHlEQUF5RDtRQUN6RCxNQUFNLGlCQUFpQixHQUFHLElBQUksR0FBRyxDQUFDLGlCQUFpQixFQUFFLENBQUM7UUFFdEQsTUFBTSxTQUFTLEdBQUcsR0FBRyxDQUFDLFFBQVEsQ0FBQyxRQUFRLEVBQUUsQ0FBQztRQUMxQyxTQUFTLENBQUMsV0FBVyxDQUFDLDJCQUEyQixDQUFDLENBQUM7UUFDbkQsU0FBUyxDQUFDLFdBQVcsQ0FBQyx1Q0FBdUMsQ0FBQyxDQUFDO1FBRS9ELE1BQU0sU0FBUyxHQUFHLEdBQUcsQ0FBQyxRQUFRLENBQUMsUUFBUSxFQUFFLENBQUM7UUFDMUMsU0FBUyxDQUFDLFdBQVcsQ0FBQyxZQUFZLEdBQUcsQ0FBQyxLQUFLLG9CQUFvQixDQUFDLENBQUM7UUFFakUsTUFBTSxRQUFRLEdBQUcsR0FBRyxDQUFDLGFBQWEsQ0FBQyxXQUFXLENBQUM7WUFDN0MsV0FBVyxFQUFFLG9CQUFvQjtZQUNqQyxJQUFJLEVBQUUsb0NBQW9DO1NBQzNDLENBQUMsQ0FBQztRQUVILE1BQU0sUUFBUSxHQUFHLEdBQUcsQ0FBQyxhQUFhLENBQUMsV0FBVyxDQUFDO1lBQzdDLFdBQVcsRUFBRSxvQkFBb0I7WUFDakMsSUFBSSxFQUFFLGlCQUFpQixHQUFHLENBQUMsS0FBSyx1QkFBdUI7U0FDeEQsQ0FBQyxDQUFDO1FBRUgsTUFBTSxRQUFRLEdBQUcsR0FBRyxDQUFDLFFBQVEsQ0FBQyxRQUFRLEVBQUUsQ0FBQztRQUN6QyxRQUFRLENBQUMsV0FBVyxDQUNsQixzQ0FBc0MsRUFDdEMseUhBQXlILENBQzFILENBQUM7UUFFRixpQkFBaUIsQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLGFBQWEsQ0FBQyxZQUFZLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQztRQUNyRSxpQkFBaUIsQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLGFBQWEsQ0FBQyxZQUFZLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQztRQUNyRSxpQkFBaUIsQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLGFBQWEsQ0FBQyxZQUFZLENBQUMsUUFBUSxFQUFFLHFCQUFxQixDQUFDLENBQUMsQ0FBQztRQUUzRixNQUFNLFFBQVEsR0FBRyxHQUFHLENBQUMsYUFBYSxDQUFDLFdBQVcsQ0FBQztZQUM3QyxXQUFXLEVBQUUsb0JBQW9CO1lBQ2pDLElBQUksRUFBRSx1RkFBdUY7U0FDOUYsQ0FBQyxDQUFDO1FBQ0gsaUJBQWlCLENBQUMsT0FBTyxDQUFDLFFBQVEsQ0FBQyxDQUFDO1FBQ3BDLGlCQUFpQixDQUFDLE9BQU8sQ0FBQyxRQUFRLENBQUMsQ0FBQztRQUNwQyxpQkFBaUIsQ0FBQyxPQUFPLENBQUMsUUFBUSxDQUFDLENBQUM7UUFFcEMsTUFBTSxRQUFRLEdBQUcsSUFBSSxHQUFHLENBQUMsUUFBUSxDQUFDLElBQUksRUFBRSxVQUFVLEVBQUU7WUFDbEQsR0FBRztZQUNILFlBQVksRUFBRSxHQUFHLENBQUMsWUFBWSxDQUFDLEVBQUUsQ0FBQyxHQUFHLENBQUMsYUFBYSxDQUFDLEVBQUUsRUFBRSxHQUFHLENBQUMsWUFBWSxDQUFDLElBQUksQ0FBQztZQUM5RSxZQUFZLEVBQUUsSUFBSSxHQUFHLENBQUMsZ0JBQWdCLENBQUMsRUFBRSxVQUFVLEVBQUUsR0FBRyxDQUFDLHFCQUFxQixDQUFDLGNBQWMsRUFBRSxDQUFDO1lBQ2hHLFFBQVEsRUFBRSxpQkFBaUI7U0FDNUIsQ0FBQyxDQUFDO1FBRUgsUUFBUSxDQUFDLGVBQWUsQ0FBQyxJQUFJLHlCQUFlLENBQUM7WUFDM0MsT0FBTyxFQUFFLENBQUMsT0FBTyxFQUFFLGVBQWUsRUFBRSx5QkFBeUIsQ0FBQztZQUM5RCxTQUFTLEVBQUUsQ0FBQyxHQUFHLENBQUM7U0FDakIsQ0FBQyxDQUFDLENBQUM7UUFFSixRQUFRLENBQUMsV0FBVyxDQUFDLGdCQUFnQixDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztLQUM1RDtDQUNGO0FBRUQsSUFBSSxTQUFTLENBQUMsR0FBRyxFQUFFLDRCQUE0QixDQUFDLENBQUM7QUFFakQsR0FBRyxDQUFDLEtBQUssRUFBRSxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLy8vICFjZGstaW50ZWcgKlxuaW1wb3J0IHsgUG9saWN5U3RhdGVtZW50IH0gZnJvbSAnQGF3cy1jZGsvYXdzLWlhbSc7XG5pbXBvcnQgKiBhcyBjZGsgZnJvbSAnQGF3cy1jZGsvY29yZSc7XG5pbXBvcnQgKiBhcyBlYzIgZnJvbSAnLi4vbGliJztcblxuY29uc3QgYXBwID0gbmV3IGNkay5BcHAoKTtcblxuY2xhc3MgVGVzdFN0YWNrIGV4dGVuZHMgY2RrLlN0YWNrIHtcbiAgY29uc3RydWN0b3Ioc2NvcGU6IGNkay5BcHAsIGlkOiBzdHJpbmcsIHByb3BzPzogY2RrLlN0YWNrUHJvcHMpIHtcbiAgICBzdXBlcihzY29wZSwgaWQsIHByb3BzKTtcblxuICAgIGNvbnN0IHZwYyA9IG5ldyBlYzIuVnBjKHRoaXMsICdWUEMnKTtcblxuICAgIC8vIEhlcmUgd2UgdGVzdCBkZWZhdWx0IHNlcGFyYXRvciBhcyBwcm9iYWJseSBtb3N0IHVzZWZ1bFxuICAgIGNvbnN0IG11bHRpcGFydFVzZXJEYXRhID0gbmV3IGVjMi5NdWx0aXBhcnRVc2VyRGF0YSgpO1xuXG4gICAgY29uc3QgdXNlckRhdGExID0gZWMyLlVzZXJEYXRhLmZvckxpbnV4KCk7XG4gICAgdXNlckRhdGExLmFkZENvbW1hbmRzKCdlY2hvIOWkp+OCieOBqCA+IC92YXIvdG1wL2VjaG8xJyk7XG4gICAgdXNlckRhdGExLmFkZENvbW1hbmRzKCdjcCAvdmFyL3RtcC9lY2hvMSAvdmFyL3RtcC9lY2hvMS1jb3B5Jyk7XG5cbiAgICBjb25zdCB1c2VyRGF0YTIgPSBlYzIuVXNlckRhdGEuZm9yTGludXgoKTtcbiAgICB1c2VyRGF0YTIuYWRkQ29tbWFuZHMoYGVjaG8g5aSn44KJ44GoICR7dnBjLnZwY0lkfSAgPiAvdmFyL3RtcC9lY2hvMmApO1xuXG4gICAgY29uc3QgcmF3UGFydDEgPSBlYzIuTXVsdGlwYXJ0Qm9keS5mcm9tUmF3Qm9keSh7XG4gICAgICBjb250ZW50VHlwZTogJ3RleHQveC1zaGVsbHNjcmlwdCcsXG4gICAgICBib2R5OiAnZWNobyBcIlJhd1BhcnRcIiA+IC92YXIvdG1wL3Jhd1BhcnQxJyxcbiAgICB9KTtcblxuICAgIGNvbnN0IHJhd1BhcnQyID0gZWMyLk11bHRpcGFydEJvZHkuZnJvbVJhd0JvZHkoe1xuICAgICAgY29udGVudFR5cGU6ICd0ZXh0L3gtc2hlbGxzY3JpcHQnLFxuICAgICAgYm9keTogYGVjaG8gXCJSYXdQYXJ0ICR7dnBjLnZwY0lkfVwiID4gL3Zhci90bXAvcmF3UGFydDJgLFxuICAgIH0pO1xuXG4gICAgY29uc3QgYm9vdEhvb2sgPSBlYzIuVXNlckRhdGEuZm9yTGludXgoKTtcbiAgICBib290SG9vay5hZGRDb21tYW5kcyhcbiAgICAgICdlY2hvIFwiQm9vdGhvb2syXCIgPiAvdmFyL3RtcC9ib290aG9vaycsXG4gICAgICAnY2xvdWQtaW5pdC1wZXIgb25jZSBkb2NrZXJfb3B0aW9ucyBlY2hvIFxcJ09QVElPTlM9XCIke09QVElPTlN9IC0tc3RvcmFnZS1vcHQgZG0uYmFzZXNpemU9MjBHXCJcXCcgPj4gL2V0Yy9zeXNjb25maWcvZG9ja2VyJyxcbiAgICApO1xuXG4gICAgbXVsdGlwYXJ0VXNlckRhdGEuYWRkUGFydChlYzIuTXVsdGlwYXJ0Qm9keS5mcm9tVXNlckRhdGEodXNlckRhdGExKSk7XG4gICAgbXVsdGlwYXJ0VXNlckRhdGEuYWRkUGFydChlYzIuTXVsdGlwYXJ0Qm9keS5mcm9tVXNlckRhdGEodXNlckRhdGEyKSk7XG4gICAgbXVsdGlwYXJ0VXNlckRhdGEuYWRkUGFydChlYzIuTXVsdGlwYXJ0Qm9keS5mcm9tVXNlckRhdGEoYm9vdEhvb2ssICd0ZXh0L2Nsb3VkLWJvb3Rob29rJykpO1xuXG4gICAgY29uc3QgcmF3UGFydDMgPSBlYzIuTXVsdGlwYXJ0Qm9keS5mcm9tUmF3Qm9keSh7XG4gICAgICBjb250ZW50VHlwZTogJ3RleHQveC1zaGVsbHNjcmlwdCcsXG4gICAgICBib2R5OiAnY3AgJDAgL3Zhci90bXAvdXBzdGFydCAjIFNob3VsZCBiZSBvbmUgbGluZSBmaWxlIG5vIG5ldyBsaW5lIGF0IHRoZSBlbmQgYW5kIGJlZ2lubmluZycsXG4gICAgfSk7XG4gICAgbXVsdGlwYXJ0VXNlckRhdGEuYWRkUGFydChyYXdQYXJ0MSk7XG4gICAgbXVsdGlwYXJ0VXNlckRhdGEuYWRkUGFydChyYXdQYXJ0Mik7XG4gICAgbXVsdGlwYXJ0VXNlckRhdGEuYWRkUGFydChyYXdQYXJ0Myk7XG5cbiAgICBjb25zdCBpbnN0YW5jZSA9IG5ldyBlYzIuSW5zdGFuY2UodGhpcywgJ0luc3RhbmNlJywge1xuICAgICAgdnBjLFxuICAgICAgaW5zdGFuY2VUeXBlOiBlYzIuSW5zdGFuY2VUeXBlLm9mKGVjMi5JbnN0YW5jZUNsYXNzLlQzLCBlYzIuSW5zdGFuY2VTaXplLk5BTk8pLFxuICAgICAgbWFjaGluZUltYWdlOiBuZXcgZWMyLkFtYXpvbkxpbnV4SW1hZ2UoeyBnZW5lcmF0aW9uOiBlYzIuQW1hem9uTGludXhHZW5lcmF0aW9uLkFNQVpPTl9MSU5VWF8yIH0pLFxuICAgICAgdXNlckRhdGE6IG11bHRpcGFydFVzZXJEYXRhLFxuICAgIH0pO1xuXG4gICAgaW5zdGFuY2UuYWRkVG9Sb2xlUG9saWN5KG5ldyBQb2xpY3lTdGF0ZW1lbnQoe1xuICAgICAgYWN0aW9uczogWydzc206KicsICdzc21tZXNzYWdlczoqJywgJ2VjMm1lc3NhZ2VzOkdldE1lc3NhZ2VzJ10sXG4gICAgICByZXNvdXJjZXM6IFsnKiddLFxuICAgIH0pKTtcblxuICAgIGluc3RhbmNlLmNvbm5lY3Rpb25zLmFsbG93RnJvbUFueUlwdjQoZWMyLlBvcnQuaWNtcFBpbmcoKSk7XG4gIH1cbn1cblxubmV3IFRlc3RTdGFjayhhcHAsICdUZXN0U3RhY2tNdWx0aXBhcnRVc2VyRGF0YScpO1xuXG5hcHAuc3ludGgoKTtcbiJdfQ==