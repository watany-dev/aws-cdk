"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const cdk = require("@aws-cdk/core");
const integ_tests_1 = require("@aws-cdk/integ-tests");
const ec2 = require("../lib");
const appWithVpc = new cdk.App();
const stack = new cdk.Stack(appWithVpc, 'StackWithVpc', {
    env: {
        region: 'eu-west-1',
        account: '123456',
    },
});
const testVpc = new ec2.Vpc(stack, 'MyVpc', {
    vpcName: 'my-vpc-name',
});
const appUnderTest = new cdk.App();
const stackLookup = new cdk.Stack(appUnderTest, 'StackUnderTest', {
    env: {
        region: 'us-east-2',
        account: '123456',
    },
});
const vpcFromVpcAttributes = ec2.Vpc.fromVpcAttributes(stackLookup, 'VpcFromVpcAttributes', {
    region: 'eu-west-1',
    availabilityZones: ['eu-west-1a'],
    vpcId: testVpc.vpcId,
});
const vpcFromLookup = ec2.Vpc.fromLookup(stack, 'VpcFromLookup', {
    region: 'eu-west-1',
    vpcName: 'my-vpc-name',
});
new cdk.CfnOutput(stackLookup, 'OutputFromVpcAttributes', {
    value: `Region fromVpcAttributes: ${vpcFromVpcAttributes.env.region}`,
});
new cdk.CfnOutput(stackLookup, 'OutputFromLookup', {
    value: `Region fromLookup: ${vpcFromLookup.env.region}`,
});
new integ_tests_1.IntegTest(appUnderTest, 'ArchiveTest', {
    testCases: [stackLookup],
});
appWithVpc.synth();
appUnderTest.synth();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW50ZWcudnBjLWxvb2t1cC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbImludGVnLnZwYy1sb29rdXAudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSxxQ0FBcUM7QUFDckMsc0RBQWlEO0FBQ2pELDhCQUE4QjtBQUU5QixNQUFNLFVBQVUsR0FBRyxJQUFJLEdBQUcsQ0FBQyxHQUFHLEVBQUUsQ0FBQztBQUNqQyxNQUFNLEtBQUssR0FBRyxJQUFJLEdBQUcsQ0FBQyxLQUFLLENBQUMsVUFBVSxFQUFFLGNBQWMsRUFBRTtJQUN0RCxHQUFHLEVBQUU7UUFDSCxNQUFNLEVBQUUsV0FBVztRQUNuQixPQUFPLEVBQUUsUUFBUTtLQUNsQjtDQUNGLENBQUMsQ0FBQztBQUVILE1BQU0sT0FBTyxHQUFHLElBQUksR0FBRyxDQUFDLEdBQUcsQ0FBQyxLQUFLLEVBQUUsT0FBTyxFQUFFO0lBQzFDLE9BQU8sRUFBRSxhQUFhO0NBQ3ZCLENBQUMsQ0FBQztBQUVILE1BQU0sWUFBWSxHQUFHLElBQUksR0FBRyxDQUFDLEdBQUcsRUFBRSxDQUFDO0FBQ25DLE1BQU0sV0FBVyxHQUFHLElBQUksR0FBRyxDQUFDLEtBQUssQ0FBQyxZQUFZLEVBQUUsZ0JBQWdCLEVBQUU7SUFDaEUsR0FBRyxFQUFFO1FBQ0gsTUFBTSxFQUFFLFdBQVc7UUFDbkIsT0FBTyxFQUFFLFFBQVE7S0FDbEI7Q0FDRixDQUFDLENBQUM7QUFFSCxNQUFNLG9CQUFvQixHQUFHLEdBQUcsQ0FBQyxHQUFHLENBQUMsaUJBQWlCLENBQUMsV0FBVyxFQUFFLHNCQUFzQixFQUFFO0lBQzFGLE1BQU0sRUFBRSxXQUFXO0lBQ25CLGlCQUFpQixFQUFFLENBQUMsWUFBWSxDQUFDO0lBQ2pDLEtBQUssRUFBRSxPQUFPLENBQUMsS0FBSztDQUNyQixDQUFDLENBQUM7QUFFSCxNQUFNLGFBQWEsR0FBRyxHQUFHLENBQUMsR0FBRyxDQUFDLFVBQVUsQ0FBQyxLQUFLLEVBQUUsZUFBZSxFQUFFO0lBQy9ELE1BQU0sRUFBRSxXQUFXO0lBQ25CLE9BQU8sRUFBRSxhQUFhO0NBQ3ZCLENBQUMsQ0FBQztBQUVILElBQUksR0FBRyxDQUFDLFNBQVMsQ0FBQyxXQUFXLEVBQUUseUJBQXlCLEVBQUU7SUFDeEQsS0FBSyxFQUFFLDZCQUE2QixvQkFBb0IsQ0FBQyxHQUFHLENBQUMsTUFBTSxFQUFFO0NBQ3RFLENBQUMsQ0FBQztBQUVILElBQUksR0FBRyxDQUFDLFNBQVMsQ0FBQyxXQUFXLEVBQUUsa0JBQWtCLEVBQUU7SUFDakQsS0FBSyxFQUFFLHNCQUFzQixhQUFhLENBQUMsR0FBRyxDQUFDLE1BQU0sRUFBRTtDQUN4RCxDQUFDLENBQUM7QUFFSCxJQUFJLHVCQUFTLENBQUMsWUFBWSxFQUFFLGFBQWEsRUFBRTtJQUN6QyxTQUFTLEVBQUUsQ0FBQyxXQUFXLENBQUM7Q0FDekIsQ0FBQyxDQUFDO0FBQ0gsVUFBVSxDQUFDLEtBQUssRUFBRSxDQUFDO0FBQ25CLFlBQVksQ0FBQyxLQUFLLEVBQUUsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAqIGFzIGNkayBmcm9tICdAYXdzLWNkay9jb3JlJztcbmltcG9ydCB7IEludGVnVGVzdCB9IGZyb20gJ0Bhd3MtY2RrL2ludGVnLXRlc3RzJztcbmltcG9ydCAqIGFzIGVjMiBmcm9tICcuLi9saWInO1xuXG5jb25zdCBhcHBXaXRoVnBjID0gbmV3IGNkay5BcHAoKTtcbmNvbnN0IHN0YWNrID0gbmV3IGNkay5TdGFjayhhcHBXaXRoVnBjLCAnU3RhY2tXaXRoVnBjJywge1xuICBlbnY6IHtcbiAgICByZWdpb246ICdldS13ZXN0LTEnLFxuICAgIGFjY291bnQ6ICcxMjM0NTYnLFxuICB9LFxufSk7XG5cbmNvbnN0IHRlc3RWcGMgPSBuZXcgZWMyLlZwYyhzdGFjaywgJ015VnBjJywge1xuICB2cGNOYW1lOiAnbXktdnBjLW5hbWUnLFxufSk7XG5cbmNvbnN0IGFwcFVuZGVyVGVzdCA9IG5ldyBjZGsuQXBwKCk7XG5jb25zdCBzdGFja0xvb2t1cCA9IG5ldyBjZGsuU3RhY2soYXBwVW5kZXJUZXN0LCAnU3RhY2tVbmRlclRlc3QnLCB7XG4gIGVudjoge1xuICAgIHJlZ2lvbjogJ3VzLWVhc3QtMicsXG4gICAgYWNjb3VudDogJzEyMzQ1NicsXG4gIH0sXG59KTtcblxuY29uc3QgdnBjRnJvbVZwY0F0dHJpYnV0ZXMgPSBlYzIuVnBjLmZyb21WcGNBdHRyaWJ1dGVzKHN0YWNrTG9va3VwLCAnVnBjRnJvbVZwY0F0dHJpYnV0ZXMnLCB7XG4gIHJlZ2lvbjogJ2V1LXdlc3QtMScsXG4gIGF2YWlsYWJpbGl0eVpvbmVzOiBbJ2V1LXdlc3QtMWEnXSxcbiAgdnBjSWQ6IHRlc3RWcGMudnBjSWQsXG59KTtcblxuY29uc3QgdnBjRnJvbUxvb2t1cCA9IGVjMi5WcGMuZnJvbUxvb2t1cChzdGFjaywgJ1ZwY0Zyb21Mb29rdXAnLCB7XG4gIHJlZ2lvbjogJ2V1LXdlc3QtMScsXG4gIHZwY05hbWU6ICdteS12cGMtbmFtZScsXG59KTtcblxubmV3IGNkay5DZm5PdXRwdXQoc3RhY2tMb29rdXAsICdPdXRwdXRGcm9tVnBjQXR0cmlidXRlcycsIHtcbiAgdmFsdWU6IGBSZWdpb24gZnJvbVZwY0F0dHJpYnV0ZXM6ICR7dnBjRnJvbVZwY0F0dHJpYnV0ZXMuZW52LnJlZ2lvbn1gLFxufSk7XG5cbm5ldyBjZGsuQ2ZuT3V0cHV0KHN0YWNrTG9va3VwLCAnT3V0cHV0RnJvbUxvb2t1cCcsIHtcbiAgdmFsdWU6IGBSZWdpb24gZnJvbUxvb2t1cDogJHt2cGNGcm9tTG9va3VwLmVudi5yZWdpb259YCxcbn0pO1xuXG5uZXcgSW50ZWdUZXN0KGFwcFVuZGVyVGVzdCwgJ0FyY2hpdmVUZXN0Jywge1xuICB0ZXN0Q2FzZXM6IFtzdGFja0xvb2t1cF0sXG59KTtcbmFwcFdpdGhWcGMuc3ludGgoKTtcbmFwcFVuZGVyVGVzdC5zeW50aCgpOyJdfQ==