"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const aws_s3_1 = require("@aws-cdk/aws-s3");
const core_1 = require("@aws-cdk/core");
const integ_tests_1 = require("@aws-cdk/integ-tests");
const lib_1 = require("../lib");
const app = new core_1.App();
class TestStack extends core_1.Stack {
    constructor(scope, id, props) {
        super(scope, id, props);
        const vpc = new lib_1.Vpc(this, 'VPC');
        new lib_1.FlowLog(this, 'FlowLogsCW', {
            resourceType: lib_1.FlowLogResourceType.fromVpc(vpc),
            logFormat: [
                lib_1.LogFormat.SRC_PORT,
            ],
        });
        new lib_1.FlowLog(this, 'FlowLogsAllFormatCW', {
            resourceType: lib_1.FlowLogResourceType.fromVpc(vpc),
            logFormat: [
                lib_1.LogFormat.VERSION,
                lib_1.LogFormat.ACCOUNT_ID,
                lib_1.LogFormat.INTERFACE_ID,
                lib_1.LogFormat.SRC_ADDR,
                lib_1.LogFormat.DST_ADDR,
                lib_1.LogFormat.SRC_PORT,
                lib_1.LogFormat.DST_PORT,
                lib_1.LogFormat.PROTOCOL,
                lib_1.LogFormat.PACKETS,
                lib_1.LogFormat.BYTES,
                lib_1.LogFormat.START_TIMESTAMP,
                lib_1.LogFormat.END_TIMESTAMP,
                lib_1.LogFormat.ACTION,
                lib_1.LogFormat.LOG_STATUS,
                lib_1.LogFormat.VPC_ID,
                lib_1.LogFormat.SUBNET_ID,
                lib_1.LogFormat.INSTANCE_ID,
                lib_1.LogFormat.TCP_FLAGS,
                lib_1.LogFormat.TRAFFIC_TYPE,
                lib_1.LogFormat.PKT_SRC_ADDR,
                lib_1.LogFormat.PKT_DST_ADDR,
                lib_1.LogFormat.REGION,
                lib_1.LogFormat.AZ_ID,
                lib_1.LogFormat.SUBLOCATION_TYPE,
                lib_1.LogFormat.SUBLOCATION_ID,
                lib_1.LogFormat.PKT_SRC_AWS_SERVICE,
                lib_1.LogFormat.PKT_DST_AWS_SERVICE,
                lib_1.LogFormat.FLOW_DIRECTION,
                lib_1.LogFormat.TRAFFIC_PATH,
            ],
        });
        const bucket = new aws_s3_1.Bucket(this, 'Bucket', {
            removalPolicy: core_1.RemovalPolicy.DESTROY,
            autoDeleteObjects: true,
        });
        vpc.addFlowLog('FlowLogsS3', {
            destination: lib_1.FlowLogDestination.toS3(bucket, 'prefix/'),
            logFormat: [
                lib_1.LogFormat.DST_PORT,
                lib_1.LogFormat.SRC_PORT,
            ],
        });
    }
}
new integ_tests_1.IntegTest(app, 'FlowLogs', {
    testCases: [
        new TestStack(app, 'FlowLogsTestStack'),
    ],
});
app.synth();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW50ZWcudnBjLWZsb3ctbG9ncy1jdXN0b21mb3JtYXQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJpbnRlZy52cGMtZmxvdy1sb2dzLWN1c3RvbWZvcm1hdC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLDRDQUF5QztBQUN6Qyx3Q0FBc0U7QUFDdEUsc0RBQWlEO0FBQ2pELGdDQUEwRjtBQUUxRixNQUFNLEdBQUcsR0FBRyxJQUFJLFVBQUcsRUFBRSxDQUFDO0FBR3RCLE1BQU0sU0FBVSxTQUFRLFlBQUs7SUFDM0IsWUFBWSxLQUFVLEVBQUUsRUFBVSxFQUFFLEtBQWtCO1FBQ3BELEtBQUssQ0FBQyxLQUFLLEVBQUUsRUFBRSxFQUFFLEtBQUssQ0FBQyxDQUFDO1FBRXhCLE1BQU0sR0FBRyxHQUFHLElBQUksU0FBRyxDQUFDLElBQUksRUFBRSxLQUFLLENBQUMsQ0FBQztRQUVqQyxJQUFJLGFBQU8sQ0FBQyxJQUFJLEVBQUUsWUFBWSxFQUFFO1lBQzlCLFlBQVksRUFBRSx5QkFBbUIsQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDO1lBQzlDLFNBQVMsRUFBRTtnQkFDVCxlQUFTLENBQUMsUUFBUTthQUNuQjtTQUNGLENBQUMsQ0FBQztRQUNILElBQUksYUFBTyxDQUFDLElBQUksRUFBRSxxQkFBcUIsRUFBRTtZQUN2QyxZQUFZLEVBQUUseUJBQW1CLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQztZQUM5QyxTQUFTLEVBQUU7Z0JBQ1QsZUFBUyxDQUFDLE9BQU87Z0JBQ2pCLGVBQVMsQ0FBQyxVQUFVO2dCQUNwQixlQUFTLENBQUMsWUFBWTtnQkFDdEIsZUFBUyxDQUFDLFFBQVE7Z0JBQ2xCLGVBQVMsQ0FBQyxRQUFRO2dCQUNsQixlQUFTLENBQUMsUUFBUTtnQkFDbEIsZUFBUyxDQUFDLFFBQVE7Z0JBQ2xCLGVBQVMsQ0FBQyxRQUFRO2dCQUNsQixlQUFTLENBQUMsT0FBTztnQkFDakIsZUFBUyxDQUFDLEtBQUs7Z0JBQ2YsZUFBUyxDQUFDLGVBQWU7Z0JBQ3pCLGVBQVMsQ0FBQyxhQUFhO2dCQUN2QixlQUFTLENBQUMsTUFBTTtnQkFDaEIsZUFBUyxDQUFDLFVBQVU7Z0JBQ3BCLGVBQVMsQ0FBQyxNQUFNO2dCQUNoQixlQUFTLENBQUMsU0FBUztnQkFDbkIsZUFBUyxDQUFDLFdBQVc7Z0JBQ3JCLGVBQVMsQ0FBQyxTQUFTO2dCQUNuQixlQUFTLENBQUMsWUFBWTtnQkFDdEIsZUFBUyxDQUFDLFlBQVk7Z0JBQ3RCLGVBQVMsQ0FBQyxZQUFZO2dCQUN0QixlQUFTLENBQUMsTUFBTTtnQkFDaEIsZUFBUyxDQUFDLEtBQUs7Z0JBQ2YsZUFBUyxDQUFDLGdCQUFnQjtnQkFDMUIsZUFBUyxDQUFDLGNBQWM7Z0JBQ3hCLGVBQVMsQ0FBQyxtQkFBbUI7Z0JBQzdCLGVBQVMsQ0FBQyxtQkFBbUI7Z0JBQzdCLGVBQVMsQ0FBQyxjQUFjO2dCQUN4QixlQUFTLENBQUMsWUFBWTthQUN2QjtTQUNGLENBQUMsQ0FBQztRQUVILE1BQU0sTUFBTSxHQUFHLElBQUksZUFBTSxDQUFDLElBQUksRUFBRSxRQUFRLEVBQUU7WUFDeEMsYUFBYSxFQUFFLG9CQUFhLENBQUMsT0FBTztZQUNwQyxpQkFBaUIsRUFBRSxJQUFJO1NBQ3hCLENBQUMsQ0FBQztRQUNILEdBQUcsQ0FBQyxVQUFVLENBQUMsWUFBWSxFQUFFO1lBQzNCLFdBQVcsRUFBRSx3QkFBa0IsQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLFNBQVMsQ0FBQztZQUN2RCxTQUFTLEVBQUU7Z0JBQ1QsZUFBUyxDQUFDLFFBQVE7Z0JBQ2xCLGVBQVMsQ0FBQyxRQUFRO2FBQ25CO1NBQ0YsQ0FBQyxDQUFDO0tBRUo7Q0FDRjtBQUdELElBQUksdUJBQVMsQ0FBQyxHQUFHLEVBQUUsVUFBVSxFQUFFO0lBQzdCLFNBQVMsRUFBRTtRQUNULElBQUksU0FBUyxDQUFDLEdBQUcsRUFBRSxtQkFBbUIsQ0FBQztLQUN4QztDQUNGLENBQUMsQ0FBQztBQUVILEdBQUcsQ0FBQyxLQUFLLEVBQUUsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEJ1Y2tldCB9IGZyb20gJ0Bhd3MtY2RrL2F3cy1zMyc7XG5pbXBvcnQgeyBBcHAsIFN0YWNrLCBTdGFja1Byb3BzLCBSZW1vdmFsUG9saWN5IH0gZnJvbSAnQGF3cy1jZGsvY29yZSc7XG5pbXBvcnQgeyBJbnRlZ1Rlc3QgfSBmcm9tICdAYXdzLWNkay9pbnRlZy10ZXN0cyc7XG5pbXBvcnQgeyBGbG93TG9nLCBGbG93TG9nRGVzdGluYXRpb24sIEZsb3dMb2dSZXNvdXJjZVR5cGUsIFZwYywgTG9nRm9ybWF0IH0gZnJvbSAnLi4vbGliJztcblxuY29uc3QgYXBwID0gbmV3IEFwcCgpO1xuXG5cbmNsYXNzIFRlc3RTdGFjayBleHRlbmRzIFN0YWNrIHtcbiAgY29uc3RydWN0b3Ioc2NvcGU6IEFwcCwgaWQ6IHN0cmluZywgcHJvcHM/OiBTdGFja1Byb3BzKSB7XG4gICAgc3VwZXIoc2NvcGUsIGlkLCBwcm9wcyk7XG5cbiAgICBjb25zdCB2cGMgPSBuZXcgVnBjKHRoaXMsICdWUEMnKTtcblxuICAgIG5ldyBGbG93TG9nKHRoaXMsICdGbG93TG9nc0NXJywge1xuICAgICAgcmVzb3VyY2VUeXBlOiBGbG93TG9nUmVzb3VyY2VUeXBlLmZyb21WcGModnBjKSxcbiAgICAgIGxvZ0Zvcm1hdDogW1xuICAgICAgICBMb2dGb3JtYXQuU1JDX1BPUlQsXG4gICAgICBdLFxuICAgIH0pO1xuICAgIG5ldyBGbG93TG9nKHRoaXMsICdGbG93TG9nc0FsbEZvcm1hdENXJywge1xuICAgICAgcmVzb3VyY2VUeXBlOiBGbG93TG9nUmVzb3VyY2VUeXBlLmZyb21WcGModnBjKSxcbiAgICAgIGxvZ0Zvcm1hdDogW1xuICAgICAgICBMb2dGb3JtYXQuVkVSU0lPTixcbiAgICAgICAgTG9nRm9ybWF0LkFDQ09VTlRfSUQsXG4gICAgICAgIExvZ0Zvcm1hdC5JTlRFUkZBQ0VfSUQsXG4gICAgICAgIExvZ0Zvcm1hdC5TUkNfQUREUixcbiAgICAgICAgTG9nRm9ybWF0LkRTVF9BRERSLFxuICAgICAgICBMb2dGb3JtYXQuU1JDX1BPUlQsXG4gICAgICAgIExvZ0Zvcm1hdC5EU1RfUE9SVCxcbiAgICAgICAgTG9nRm9ybWF0LlBST1RPQ09MLFxuICAgICAgICBMb2dGb3JtYXQuUEFDS0VUUyxcbiAgICAgICAgTG9nRm9ybWF0LkJZVEVTLFxuICAgICAgICBMb2dGb3JtYXQuU1RBUlRfVElNRVNUQU1QLFxuICAgICAgICBMb2dGb3JtYXQuRU5EX1RJTUVTVEFNUCxcbiAgICAgICAgTG9nRm9ybWF0LkFDVElPTixcbiAgICAgICAgTG9nRm9ybWF0LkxPR19TVEFUVVMsXG4gICAgICAgIExvZ0Zvcm1hdC5WUENfSUQsXG4gICAgICAgIExvZ0Zvcm1hdC5TVUJORVRfSUQsXG4gICAgICAgIExvZ0Zvcm1hdC5JTlNUQU5DRV9JRCxcbiAgICAgICAgTG9nRm9ybWF0LlRDUF9GTEFHUyxcbiAgICAgICAgTG9nRm9ybWF0LlRSQUZGSUNfVFlQRSxcbiAgICAgICAgTG9nRm9ybWF0LlBLVF9TUkNfQUREUixcbiAgICAgICAgTG9nRm9ybWF0LlBLVF9EU1RfQUREUixcbiAgICAgICAgTG9nRm9ybWF0LlJFR0lPTixcbiAgICAgICAgTG9nRm9ybWF0LkFaX0lELFxuICAgICAgICBMb2dGb3JtYXQuU1VCTE9DQVRJT05fVFlQRSxcbiAgICAgICAgTG9nRm9ybWF0LlNVQkxPQ0FUSU9OX0lELFxuICAgICAgICBMb2dGb3JtYXQuUEtUX1NSQ19BV1NfU0VSVklDRSxcbiAgICAgICAgTG9nRm9ybWF0LlBLVF9EU1RfQVdTX1NFUlZJQ0UsXG4gICAgICAgIExvZ0Zvcm1hdC5GTE9XX0RJUkVDVElPTixcbiAgICAgICAgTG9nRm9ybWF0LlRSQUZGSUNfUEFUSCxcbiAgICAgIF0sXG4gICAgfSk7XG5cbiAgICBjb25zdCBidWNrZXQgPSBuZXcgQnVja2V0KHRoaXMsICdCdWNrZXQnLCB7XG4gICAgICByZW1vdmFsUG9saWN5OiBSZW1vdmFsUG9saWN5LkRFU1RST1ksXG4gICAgICBhdXRvRGVsZXRlT2JqZWN0czogdHJ1ZSxcbiAgICB9KTtcbiAgICB2cGMuYWRkRmxvd0xvZygnRmxvd0xvZ3NTMycsIHtcbiAgICAgIGRlc3RpbmF0aW9uOiBGbG93TG9nRGVzdGluYXRpb24udG9TMyhidWNrZXQsICdwcmVmaXgvJyksXG4gICAgICBsb2dGb3JtYXQ6IFtcbiAgICAgICAgTG9nRm9ybWF0LkRTVF9QT1JULFxuICAgICAgICBMb2dGb3JtYXQuU1JDX1BPUlQsXG4gICAgICBdLFxuICAgIH0pO1xuXG4gIH1cbn1cblxuXG5uZXcgSW50ZWdUZXN0KGFwcCwgJ0Zsb3dMb2dzJywge1xuICB0ZXN0Q2FzZXM6IFtcbiAgICBuZXcgVGVzdFN0YWNrKGFwcCwgJ0Zsb3dMb2dzVGVzdFN0YWNrJyksXG4gIF0sXG59KTtcblxuYXBwLnN5bnRoKCk7XG4iXX0=