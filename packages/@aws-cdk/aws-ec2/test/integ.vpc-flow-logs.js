"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const aws_iam_1 = require("@aws-cdk/aws-iam");
const s3 = require("@aws-cdk/aws-s3");
const core_1 = require("@aws-cdk/core");
const integ_tests_1 = require("@aws-cdk/integ-tests");
const lib_1 = require("../lib");
const app = new core_1.App();
class FeatureFlagStack extends core_1.Stack {
    constructor(scope, id, props) {
        super(scope, id, props);
        const vpc = new lib_1.Vpc(this, 'VPC', { natGateways: 1 });
        const flowLog = vpc.addFlowLog('FlowLogsS3', {
            destination: lib_1.FlowLogDestination.toS3(),
        });
        this.bucket = flowLog.bucket;
        this.bucketArn = this.exportValue(flowLog.bucket.bucketArn);
        vpc.addFlowLog('FlowLogsS3WithDestinationOptions', {
            destination: lib_1.FlowLogDestination.toS3(undefined, undefined, {
                hiveCompatiblePartitions: true,
            }),
        });
        new lib_1.Instance(this, 'FlowLogsInstance', {
            vpc,
            instanceType: lib_1.InstanceType.of(lib_1.InstanceClass.T3, lib_1.InstanceSize.SMALL),
            machineImage: lib_1.MachineImage.latestAmazonLinux({
                generation: lib_1.AmazonLinuxGeneration.AMAZON_LINUX_2,
            }),
        });
    }
}
class DependencyTestStack extends core_1.Stack {
    constructor(scope, id, props) {
        super(scope, id, props);
        const vpc = new lib_1.Vpc(this, 'VPC', { natGateways: 1 });
        const bucket = new s3.Bucket(this, 'Bucket', {
            autoDeleteObjects: true,
            removalPolicy: core_1.RemovalPolicy.DESTROY,
        });
        vpc.addFlowLog('FlowLogS3', {
            destination: lib_1.FlowLogDestination.toS3(bucket, 'vpcFlowLog'),
        });
    }
}
class TestStack extends core_1.Stack {
    constructor(scope, id, props) {
        super(scope, id, props);
        const vpc = new lib_1.Vpc(this, 'VPC', { natGateways: 1 });
        new lib_1.FlowLog(this, 'FlowLogsCW', {
            resourceType: lib_1.FlowLogResourceType.fromVpc(vpc),
        });
        vpc.addFlowLog('FlowLogsS3', {
            destination: lib_1.FlowLogDestination.toS3(),
        });
        const bucket = new s3.Bucket(this, 'Bucket', {
            removalPolicy: core_1.RemovalPolicy.DESTROY,
            autoDeleteObjects: true,
        });
        bucket.addToResourcePolicy(new aws_iam_1.PolicyStatement({
            effect: aws_iam_1.Effect.ALLOW,
            principals: [new aws_iam_1.ServicePrincipal('delivery.logs.amazonaws.com')],
            actions: ['s3:PutObject'],
            resources: [bucket.arnForObjects(`AWSLogs/${this.account}/*`)],
            conditions: {
                StringEquals: {
                    's3:x-amz-acl': 'bucket-owner-full-control',
                    'aws:SourceAccount': this.account,
                },
                ArnLike: {
                    'aws:SourceArn': this.formatArn({
                        service: 'logs',
                        resource: '*',
                    }),
                },
            },
        }));
        bucket.addToResourcePolicy(new aws_iam_1.PolicyStatement({
            effect: aws_iam_1.Effect.ALLOW,
            principals: [new aws_iam_1.ServicePrincipal('delivery.logs.amazonaws.com')],
            actions: ['s3:GetBucketAcl', 's3:ListBucket'],
            resources: [bucket.bucketArn],
            conditions: {
                StringEquals: {
                    'aws:SourceAccount': this.account,
                },
                ArnLike: {
                    'aws:SourceArn': this.formatArn({
                        service: 'logs',
                        resource: '*',
                    }),
                },
            },
        }));
        vpc.addFlowLog('FlowLogsS3KeyPrefix', {
            destination: lib_1.FlowLogDestination.toS3(bucket, 'prefix/'),
        });
    }
}
const featureFlagTest = new FeatureFlagStack(app, 'FlowLogsFeatureFlag');
const integ = new integ_tests_1.IntegTest(app, 'FlowLogs', {
    testCases: [
        new TestStack(app, 'FlowLogsTestStack'),
        featureFlagTest,
        new DependencyTestStack(app, 'DependencyTestStack'),
    ],
});
const objects = integ.assertions.awsApiCall('S3', 'listObjectsV2', {
    Bucket: featureFlagTest.bucket.bucketName,
    MaxKeys: 1,
    Prefix: `AWSLogs/${featureFlagTest.account}/vpcflowlogs`,
});
const assertionProvider = objects.node.tryFindChild('SdkProvider');
assertionProvider.addPolicyStatementFromSdkCall('s3', 'ListBucket', [featureFlagTest.bucketArn]);
assertionProvider.addPolicyStatementFromSdkCall('s3', 'GetObject', [`${featureFlagTest.bucketArn}/*`]);
objects.expect(integ_tests_1.ExpectedResult.objectLike({
    KeyCount: 1,
}));
app.synth();
//# sourceMappingURL=data:application/json;base64,